// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ewm/live_proof_session.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiveProofSession struct {
	Index           string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	ChainId         int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofType       string `protobuf:"bytes,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	BlockHeight     uint64 `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockHash       string `protobuf:"bytes,5,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	ProofHash       string `protobuf:"bytes,6,opt,name=proofHash,proto3" json:"proofHash,omitempty"`
	StoreAddress    string `protobuf:"bytes,7,opt,name=storeAddress,proto3" json:"storeAddress,omitempty"`
	ProofCount      int32  `protobuf:"varint,8,opt,name=proofCount,proto3" json:"proofCount,omitempty"`
	SessionMembers  string `protobuf:"bytes,9,opt,name=sessionMembers,proto3" json:"sessionMembers,omitempty"`
	SessionDeadline string `protobuf:"bytes,10,opt,name=sessionDeadline,proto3" json:"sessionDeadline,omitempty"`
	Finalized       bool   `protobuf:"varint,11,opt,name=finalized,proto3" json:"finalized,omitempty"`
	Expired         bool   `protobuf:"varint,12,opt,name=expired,proto3" json:"expired,omitempty"`
	Creator         string `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
	BeforeIndex     string `protobuf:"bytes,14,opt,name=beforeIndex,proto3" json:"beforeIndex,omitempty"`
	AfterIndex      string `protobuf:"bytes,15,opt,name=afterIndex,proto3" json:"afterIndex,omitempty"`
}

func (m *LiveProofSession) Reset()         { *m = LiveProofSession{} }
func (m *LiveProofSession) String() string { return proto.CompactTextString(m) }
func (*LiveProofSession) ProtoMessage()    {}
func (*LiveProofSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32fe21822b8fc36, []int{0}
}
func (m *LiveProofSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveProofSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveProofSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveProofSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveProofSession.Merge(m, src)
}
func (m *LiveProofSession) XXX_Size() int {
	return m.Size()
}
func (m *LiveProofSession) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveProofSession.DiscardUnknown(m)
}

var xxx_messageInfo_LiveProofSession proto.InternalMessageInfo

func (m *LiveProofSession) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *LiveProofSession) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *LiveProofSession) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *LiveProofSession) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *LiveProofSession) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *LiveProofSession) GetProofHash() string {
	if m != nil {
		return m.ProofHash
	}
	return ""
}

func (m *LiveProofSession) GetStoreAddress() string {
	if m != nil {
		return m.StoreAddress
	}
	return ""
}

func (m *LiveProofSession) GetProofCount() int32 {
	if m != nil {
		return m.ProofCount
	}
	return 0
}

func (m *LiveProofSession) GetSessionMembers() string {
	if m != nil {
		return m.SessionMembers
	}
	return ""
}

func (m *LiveProofSession) GetSessionDeadline() string {
	if m != nil {
		return m.SessionDeadline
	}
	return ""
}

func (m *LiveProofSession) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

func (m *LiveProofSession) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *LiveProofSession) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *LiveProofSession) GetBeforeIndex() string {
	if m != nil {
		return m.BeforeIndex
	}
	return ""
}

func (m *LiveProofSession) GetAfterIndex() string {
	if m != nil {
		return m.AfterIndex
	}
	return ""
}

func init() {
	proto.RegisterType((*LiveProofSession)(nil), "covalenthq.covenet.covenet.LiveProofSession")
}

func init() { proto.RegisterFile("ewm/live_proof_session.proto", fileDescriptor_f32fe21822b8fc36) }

var fileDescriptor_f32fe21822b8fc36 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcb, 0xae, 0xd3, 0x30,
	0x10, 0x86, 0x6b, 0x7a, 0x77, 0x4b, 0x8b, 0x2c, 0x16, 0x16, 0x42, 0x51, 0xd4, 0x05, 0xca, 0x86,
	0x76, 0xc1, 0x13, 0x70, 0x91, 0xa0, 0x12, 0x48, 0x28, 0xb0, 0x62, 0x53, 0xe5, 0x32, 0x69, 0x2c,
	0x52, 0x3b, 0xd8, 0x6e, 0xd4, 0xf2, 0x14, 0x3c, 0x16, 0xcb, 0x2e, 0xcf, 0xf2, 0xa8, 0xdd, 0x9c,
	0xc7, 0x38, 0xca, 0xa4, 0x69, 0x73, 0xba, 0x4a, 0xfe, 0x6f, 0xfe, 0x7f, 0xe2, 0x8c, 0x87, 0xba,
	0x91, 0x2a, 0x40, 0x82, 0x5d, 0x64, 0xa2, 0x80, 0x55, 0xae, 0x95, 0x4a, 0x56, 0x06, 0x8c, 0x11,
	0x4a, 0xce, 0x73, 0xad, 0xac, 0x62, 0xaf, 0x22, 0x55, 0x04, 0x19, 0x48, 0x9b, 0xfe, 0x99, 0x9f,
	0xcd, 0xf5, 0x73, 0xf6, 0xd0, 0xa6, 0x2f, 0xbe, 0x8a, 0x02, 0xbe, 0x97, 0xb9, 0x1f, 0x55, 0x8c,
	0xbd, 0xa4, 0x5d, 0x21, 0x63, 0xd8, 0x71, 0xe2, 0x12, 0x6f, 0xe8, 0x57, 0x82, 0x71, 0xda, 0x8f,
	0xd2, 0x40, 0xc8, 0x65, 0xcc, 0x9f, 0xb9, 0xc4, 0xeb, 0xfa, 0xb5, 0x64, 0xaf, 0xe9, 0x10, 0xbf,
	0xfb, 0x73, 0x9f, 0x03, 0x6f, 0x63, 0xe6, 0x0a, 0x98, 0x4b, 0x47, 0x61, 0xa6, 0xa2, 0xdf, 0x5f,
	0x40, 0xac, 0x53, 0xcb, 0x3b, 0x2e, 0xf1, 0x3a, 0x7e, 0x13, 0x95, 0xf9, 0x4a, 0x06, 0x26, 0xe5,
	0xdd, 0x2a, 0x7f, 0x01, 0x97, 0xee, 0x58, 0xed, 0x35, 0xba, 0x63, 0x75, 0x46, 0xc7, 0xc6, 0x2a,
	0x0d, 0xef, 0xe3, 0x58, 0x83, 0x31, 0xbc, 0x8f, 0x86, 0x27, 0x8c, 0x39, 0x94, 0x62, 0xe0, 0xa3,
	0xda, 0x4a, 0xcb, 0x07, 0x78, 0xf8, 0x06, 0x61, 0x6f, 0xe8, 0xe4, 0x3c, 0xb1, 0x6f, 0xb0, 0x09,
	0x41, 0x1b, 0x3e, 0xc4, 0x2e, 0x37, 0x94, 0x79, 0x74, 0x7a, 0x26, 0x9f, 0x20, 0x88, 0x33, 0x21,
	0x81, 0x53, 0x34, 0xde, 0xe2, 0xf2, 0xcc, 0x89, 0x90, 0x41, 0x26, 0xfe, 0x42, 0xcc, 0x47, 0x2e,
	0xf1, 0x06, 0xfe, 0x15, 0x94, 0x93, 0x84, 0x5d, 0x2e, 0x34, 0xc4, 0x7c, 0x8c, 0xb5, 0x5a, 0xe2,
	0x8c, 0x35, 0x04, 0x56, 0x69, 0xfe, 0x1c, 0x3b, 0xd7, 0x12, 0xa7, 0x08, 0x89, 0xd2, 0xb0, 0xc4,
	0x9b, 0x99, 0x60, 0xb5, 0x89, 0xca, 0xbf, 0x0c, 0x12, 0x0b, 0xba, 0x32, 0x4c, 0xd1, 0xd0, 0x20,
	0x1f, 0x3e, 0xff, 0x3f, 0x3a, 0xe4, 0x70, 0x74, 0xc8, 0xfd, 0xd1, 0x21, 0xff, 0x4e, 0x4e, 0xeb,
	0x70, 0x72, 0x5a, 0x77, 0x27, 0xa7, 0xf5, 0xeb, 0xed, 0x5a, 0xd8, 0x74, 0x1b, 0xce, 0x23, 0xb5,
	0x59, 0x5c, 0x77, 0x65, 0x51, 0x2f, 0xd6, 0xee, 0xf2, 0x66, 0xf7, 0x39, 0x98, 0xb0, 0x87, 0x6b,
	0xf5, 0xee, 0x31, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x7e, 0x5d, 0xcf, 0x7a, 0x02, 0x00, 0x00,
}

func (m *LiveProofSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveProofSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiveProofSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AfterIndex) > 0 {
		i -= len(m.AfterIndex)
		copy(dAtA[i:], m.AfterIndex)
		i = encodeVarintLiveProofSession(dAtA, i, uint64(len(m.AfterIndex)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.BeforeIndex) > 0 {
		i -= len(m.BeforeIndex)
		copy(dAtA[i:], m.BeforeIndex)
		i = encodeVarintLiveProofSession(dAtA, i, uint64(len(m.BeforeIndex)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLiveProofSession(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Expired {
		i--
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Finalized {
		i--
		if m.Finalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.SessionDeadline) > 0 {
		i -= len(m.SessionDeadline)
		copy(dAtA[i:], m.SessionDeadline)
		i = encodeVarintLiveProofSession(dAtA, i, uint64(len(m.SessionDeadline)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SessionMembers) > 0 {
		i -= len(m.SessionMembers)
		copy(dAtA[i:], m.SessionMembers)
		i = encodeVarintLiveProofSession(dAtA, i, uint64(len(m.SessionMembers)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ProofCount != 0 {
		i = encodeVarintLiveProofSession(dAtA, i, uint64(m.ProofCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.StoreAddress) > 0 {
		i -= len(m.StoreAddress)
		copy(dAtA[i:], m.StoreAddress)
		i = encodeVarintLiveProofSession(dAtA, i, uint64(len(m.StoreAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProofHash) > 0 {
		i -= len(m.ProofHash)
		copy(dAtA[i:], m.ProofHash)
		i = encodeVarintLiveProofSession(dAtA, i, uint64(len(m.ProofHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintLiveProofSession(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintLiveProofSession(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintLiveProofSession(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintLiveProofSession(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintLiveProofSession(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiveProofSession(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiveProofSession(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiveProofSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovLiveProofSession(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovLiveProofSession(uint64(m.ChainId))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovLiveProofSession(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovLiveProofSession(uint64(m.BlockHeight))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovLiveProofSession(uint64(l))
	}
	l = len(m.ProofHash)
	if l > 0 {
		n += 1 + l + sovLiveProofSession(uint64(l))
	}
	l = len(m.StoreAddress)
	if l > 0 {
		n += 1 + l + sovLiveProofSession(uint64(l))
	}
	if m.ProofCount != 0 {
		n += 1 + sovLiveProofSession(uint64(m.ProofCount))
	}
	l = len(m.SessionMembers)
	if l > 0 {
		n += 1 + l + sovLiveProofSession(uint64(l))
	}
	l = len(m.SessionDeadline)
	if l > 0 {
		n += 1 + l + sovLiveProofSession(uint64(l))
	}
	if m.Finalized {
		n += 2
	}
	if m.Expired {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLiveProofSession(uint64(l))
	}
	l = len(m.BeforeIndex)
	if l > 0 {
		n += 1 + l + sovLiveProofSession(uint64(l))
	}
	l = len(m.AfterIndex)
	if l > 0 {
		n += 1 + l + sovLiveProofSession(uint64(l))
	}
	return n
}

func sovLiveProofSession(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiveProofSession(x uint64) (n int) {
	return sovLiveProofSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiveProofSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiveProofSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveProofSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveProofSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofCount", wireType)
			}
			m.ProofCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMembers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionMembers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionDeadline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionDeadline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finalized = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeforeIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AfterIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiveProofSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiveProofSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiveProofSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiveProofSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiveProofSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiveProofSession
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiveProofSession
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiveProofSession
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiveProofSession        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiveProofSession          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiveProofSession = fmt.Errorf("proto: unexpected end of group")
)
