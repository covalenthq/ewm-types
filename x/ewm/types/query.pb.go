// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ewm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetSystemInfoRequest struct {
}

func (m *QueryGetSystemInfoRequest) Reset()         { *m = QueryGetSystemInfoRequest{} }
func (m *QueryGetSystemInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemInfoRequest) ProtoMessage()    {}
func (*QueryGetSystemInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{2}
}
func (m *QueryGetSystemInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemInfoRequest.Merge(m, src)
}
func (m *QueryGetSystemInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemInfoRequest proto.InternalMessageInfo

type QueryGetSystemInfoResponse struct {
	SystemInfo SystemInfo `protobuf:"bytes,1,opt,name=SystemInfo,proto3" json:"SystemInfo"`
}

func (m *QueryGetSystemInfoResponse) Reset()         { *m = QueryGetSystemInfoResponse{} }
func (m *QueryGetSystemInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemInfoResponse) ProtoMessage()    {}
func (*QueryGetSystemInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{3}
}
func (m *QueryGetSystemInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemInfoResponse.Merge(m, src)
}
func (m *QueryGetSystemInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemInfoResponse proto.InternalMessageInfo

func (m *QueryGetSystemInfoResponse) GetSystemInfo() SystemInfo {
	if m != nil {
		return m.SystemInfo
	}
	return SystemInfo{}
}

type QueryGetLiveProofSessionRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetLiveProofSessionRequest) Reset()         { *m = QueryGetLiveProofSessionRequest{} }
func (m *QueryGetLiveProofSessionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiveProofSessionRequest) ProtoMessage()    {}
func (*QueryGetLiveProofSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{4}
}
func (m *QueryGetLiveProofSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiveProofSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiveProofSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiveProofSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiveProofSessionRequest.Merge(m, src)
}
func (m *QueryGetLiveProofSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiveProofSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiveProofSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiveProofSessionRequest proto.InternalMessageInfo

func (m *QueryGetLiveProofSessionRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetLiveProofSessionResponse struct {
	LiveProofSession LiveProofSession `protobuf:"bytes,1,opt,name=liveProofSession,proto3" json:"liveProofSession"`
}

func (m *QueryGetLiveProofSessionResponse) Reset()         { *m = QueryGetLiveProofSessionResponse{} }
func (m *QueryGetLiveProofSessionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiveProofSessionResponse) ProtoMessage()    {}
func (*QueryGetLiveProofSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{5}
}
func (m *QueryGetLiveProofSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiveProofSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiveProofSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiveProofSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiveProofSessionResponse.Merge(m, src)
}
func (m *QueryGetLiveProofSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiveProofSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiveProofSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiveProofSessionResponse proto.InternalMessageInfo

func (m *QueryGetLiveProofSessionResponse) GetLiveProofSession() LiveProofSession {
	if m != nil {
		return m.LiveProofSession
	}
	return LiveProofSession{}
}

type QueryAllLiveProofSessionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLiveProofSessionRequest) Reset()         { *m = QueryAllLiveProofSessionRequest{} }
func (m *QueryAllLiveProofSessionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiveProofSessionRequest) ProtoMessage()    {}
func (*QueryAllLiveProofSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{6}
}
func (m *QueryAllLiveProofSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiveProofSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiveProofSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiveProofSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiveProofSessionRequest.Merge(m, src)
}
func (m *QueryAllLiveProofSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiveProofSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiveProofSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiveProofSessionRequest proto.InternalMessageInfo

func (m *QueryAllLiveProofSessionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLiveProofSessionResponse struct {
	LiveProofSession []LiveProofSession  `protobuf:"bytes,1,rep,name=liveProofSession,proto3" json:"liveProofSession"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLiveProofSessionResponse) Reset()         { *m = QueryAllLiveProofSessionResponse{} }
func (m *QueryAllLiveProofSessionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiveProofSessionResponse) ProtoMessage()    {}
func (*QueryAllLiveProofSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{7}
}
func (m *QueryAllLiveProofSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiveProofSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiveProofSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiveProofSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiveProofSessionResponse.Merge(m, src)
}
func (m *QueryAllLiveProofSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiveProofSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiveProofSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiveProofSessionResponse proto.InternalMessageInfo

func (m *QueryAllLiveProofSessionResponse) GetLiveProofSession() []LiveProofSession {
	if m != nil {
		return m.LiveProofSession
	}
	return nil
}

func (m *QueryAllLiveProofSessionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStoredChainRoleRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetStoredChainRoleRequest) Reset()         { *m = QueryGetStoredChainRoleRequest{} }
func (m *QueryGetStoredChainRoleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredChainRoleRequest) ProtoMessage()    {}
func (*QueryGetStoredChainRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{8}
}
func (m *QueryGetStoredChainRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredChainRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredChainRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredChainRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredChainRoleRequest.Merge(m, src)
}
func (m *QueryGetStoredChainRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredChainRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredChainRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredChainRoleRequest proto.InternalMessageInfo

func (m *QueryGetStoredChainRoleRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetStoredChainRoleResponse struct {
	StoredChainRole StoredChainRole `protobuf:"bytes,1,opt,name=storedChainRole,proto3" json:"storedChainRole"`
}

func (m *QueryGetStoredChainRoleResponse) Reset()         { *m = QueryGetStoredChainRoleResponse{} }
func (m *QueryGetStoredChainRoleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredChainRoleResponse) ProtoMessage()    {}
func (*QueryGetStoredChainRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{9}
}
func (m *QueryGetStoredChainRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredChainRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredChainRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredChainRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredChainRoleResponse.Merge(m, src)
}
func (m *QueryGetStoredChainRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredChainRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredChainRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredChainRoleResponse proto.InternalMessageInfo

func (m *QueryGetStoredChainRoleResponse) GetStoredChainRole() StoredChainRole {
	if m != nil {
		return m.StoredChainRole
	}
	return StoredChainRole{}
}

type QueryAllStoredChainRoleRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredChainRoleRequest) Reset()         { *m = QueryAllStoredChainRoleRequest{} }
func (m *QueryAllStoredChainRoleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredChainRoleRequest) ProtoMessage()    {}
func (*QueryAllStoredChainRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{10}
}
func (m *QueryAllStoredChainRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredChainRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredChainRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredChainRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredChainRoleRequest.Merge(m, src)
}
func (m *QueryAllStoredChainRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredChainRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredChainRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredChainRoleRequest proto.InternalMessageInfo

func (m *QueryAllStoredChainRoleRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStoredChainRoleResponse struct {
	StoredChainRole []StoredChainRole   `protobuf:"bytes,1,rep,name=storedChainRole,proto3" json:"storedChainRole"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredChainRoleResponse) Reset()         { *m = QueryAllStoredChainRoleResponse{} }
func (m *QueryAllStoredChainRoleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredChainRoleResponse) ProtoMessage()    {}
func (*QueryAllStoredChainRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{11}
}
func (m *QueryAllStoredChainRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredChainRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredChainRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredChainRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredChainRoleResponse.Merge(m, src)
}
func (m *QueryAllStoredChainRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredChainRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredChainRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredChainRoleResponse proto.InternalMessageInfo

func (m *QueryAllStoredChainRoleResponse) GetStoredChainRole() []StoredChainRole {
	if m != nil {
		return m.StoredChainRole
	}
	return nil
}

func (m *QueryAllStoredChainRoleResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStoredChainConfigRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetStoredChainConfigRequest) Reset()         { *m = QueryGetStoredChainConfigRequest{} }
func (m *QueryGetStoredChainConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredChainConfigRequest) ProtoMessage()    {}
func (*QueryGetStoredChainConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{12}
}
func (m *QueryGetStoredChainConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredChainConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredChainConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredChainConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredChainConfigRequest.Merge(m, src)
}
func (m *QueryGetStoredChainConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredChainConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredChainConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredChainConfigRequest proto.InternalMessageInfo

func (m *QueryGetStoredChainConfigRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetStoredChainConfigResponse struct {
	StoredChainConfig StoredChainConfig `protobuf:"bytes,1,opt,name=storedChainConfig,proto3" json:"storedChainConfig"`
}

func (m *QueryGetStoredChainConfigResponse) Reset()         { *m = QueryGetStoredChainConfigResponse{} }
func (m *QueryGetStoredChainConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredChainConfigResponse) ProtoMessage()    {}
func (*QueryGetStoredChainConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{13}
}
func (m *QueryGetStoredChainConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredChainConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredChainConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredChainConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredChainConfigResponse.Merge(m, src)
}
func (m *QueryGetStoredChainConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredChainConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredChainConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredChainConfigResponse proto.InternalMessageInfo

func (m *QueryGetStoredChainConfigResponse) GetStoredChainConfig() StoredChainConfig {
	if m != nil {
		return m.StoredChainConfig
	}
	return StoredChainConfig{}
}

type QueryAllStoredChainConfigRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredChainConfigRequest) Reset()         { *m = QueryAllStoredChainConfigRequest{} }
func (m *QueryAllStoredChainConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredChainConfigRequest) ProtoMessage()    {}
func (*QueryAllStoredChainConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{14}
}
func (m *QueryAllStoredChainConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredChainConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredChainConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredChainConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredChainConfigRequest.Merge(m, src)
}
func (m *QueryAllStoredChainConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredChainConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredChainConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredChainConfigRequest proto.InternalMessageInfo

func (m *QueryAllStoredChainConfigRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStoredChainConfigResponse struct {
	StoredChainConfig []StoredChainConfig `protobuf:"bytes,1,rep,name=storedChainConfig,proto3" json:"storedChainConfig"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredChainConfigResponse) Reset()         { *m = QueryAllStoredChainConfigResponse{} }
func (m *QueryAllStoredChainConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredChainConfigResponse) ProtoMessage()    {}
func (*QueryAllStoredChainConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{15}
}
func (m *QueryAllStoredChainConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredChainConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredChainConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredChainConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredChainConfigResponse.Merge(m, src)
}
func (m *QueryAllStoredChainConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredChainConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredChainConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredChainConfigResponse proto.InternalMessageInfo

func (m *QueryAllStoredChainConfigResponse) GetStoredChainConfig() []StoredChainConfig {
	if m != nil {
		return m.StoredChainConfig
	}
	return nil
}

func (m *QueryAllStoredChainConfigResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStoredProofSessionRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetStoredProofSessionRequest) Reset()         { *m = QueryGetStoredProofSessionRequest{} }
func (m *QueryGetStoredProofSessionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredProofSessionRequest) ProtoMessage()    {}
func (*QueryGetStoredProofSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{16}
}
func (m *QueryGetStoredProofSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredProofSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredProofSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredProofSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredProofSessionRequest.Merge(m, src)
}
func (m *QueryGetStoredProofSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredProofSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredProofSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredProofSessionRequest proto.InternalMessageInfo

func (m *QueryGetStoredProofSessionRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetStoredProofSessionResponse struct {
	StoredProofSession StoredProofSession `protobuf:"bytes,1,opt,name=storedProofSession,proto3" json:"storedProofSession"`
}

func (m *QueryGetStoredProofSessionResponse) Reset()         { *m = QueryGetStoredProofSessionResponse{} }
func (m *QueryGetStoredProofSessionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStoredProofSessionResponse) ProtoMessage()    {}
func (*QueryGetStoredProofSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{17}
}
func (m *QueryGetStoredProofSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStoredProofSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStoredProofSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStoredProofSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStoredProofSessionResponse.Merge(m, src)
}
func (m *QueryGetStoredProofSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStoredProofSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStoredProofSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStoredProofSessionResponse proto.InternalMessageInfo

func (m *QueryGetStoredProofSessionResponse) GetStoredProofSession() StoredProofSession {
	if m != nil {
		return m.StoredProofSession
	}
	return StoredProofSession{}
}

type QueryAllStoredProofSessionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredProofSessionRequest) Reset()         { *m = QueryAllStoredProofSessionRequest{} }
func (m *QueryAllStoredProofSessionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredProofSessionRequest) ProtoMessage()    {}
func (*QueryAllStoredProofSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{18}
}
func (m *QueryAllStoredProofSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredProofSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredProofSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredProofSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredProofSessionRequest.Merge(m, src)
}
func (m *QueryAllStoredProofSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredProofSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredProofSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredProofSessionRequest proto.InternalMessageInfo

func (m *QueryAllStoredProofSessionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStoredProofSessionResponse struct {
	StoredProofSession []StoredProofSession `protobuf:"bytes,1,rep,name=storedProofSession,proto3" json:"storedProofSession"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStoredProofSessionResponse) Reset()         { *m = QueryAllStoredProofSessionResponse{} }
func (m *QueryAllStoredProofSessionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStoredProofSessionResponse) ProtoMessage()    {}
func (*QueryAllStoredProofSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8bb227319b4ba40, []int{19}
}
func (m *QueryAllStoredProofSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStoredProofSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStoredProofSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStoredProofSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStoredProofSessionResponse.Merge(m, src)
}
func (m *QueryAllStoredProofSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStoredProofSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStoredProofSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStoredProofSessionResponse proto.InternalMessageInfo

func (m *QueryAllStoredProofSessionResponse) GetStoredProofSession() []StoredProofSession {
	if m != nil {
		return m.StoredProofSession
	}
	return nil
}

func (m *QueryAllStoredProofSessionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "covalenthq.ewm.ewm.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "covalenthq.ewm.ewm.QueryParamsResponse")
	proto.RegisterType((*QueryGetSystemInfoRequest)(nil), "covalenthq.ewm.ewm.QueryGetSystemInfoRequest")
	proto.RegisterType((*QueryGetSystemInfoResponse)(nil), "covalenthq.ewm.ewm.QueryGetSystemInfoResponse")
	proto.RegisterType((*QueryGetLiveProofSessionRequest)(nil), "covalenthq.ewm.ewm.QueryGetLiveProofSessionRequest")
	proto.RegisterType((*QueryGetLiveProofSessionResponse)(nil), "covalenthq.ewm.ewm.QueryGetLiveProofSessionResponse")
	proto.RegisterType((*QueryAllLiveProofSessionRequest)(nil), "covalenthq.ewm.ewm.QueryAllLiveProofSessionRequest")
	proto.RegisterType((*QueryAllLiveProofSessionResponse)(nil), "covalenthq.ewm.ewm.QueryAllLiveProofSessionResponse")
	proto.RegisterType((*QueryGetStoredChainRoleRequest)(nil), "covalenthq.ewm.ewm.QueryGetStoredChainRoleRequest")
	proto.RegisterType((*QueryGetStoredChainRoleResponse)(nil), "covalenthq.ewm.ewm.QueryGetStoredChainRoleResponse")
	proto.RegisterType((*QueryAllStoredChainRoleRequest)(nil), "covalenthq.ewm.ewm.QueryAllStoredChainRoleRequest")
	proto.RegisterType((*QueryAllStoredChainRoleResponse)(nil), "covalenthq.ewm.ewm.QueryAllStoredChainRoleResponse")
	proto.RegisterType((*QueryGetStoredChainConfigRequest)(nil), "covalenthq.ewm.ewm.QueryGetStoredChainConfigRequest")
	proto.RegisterType((*QueryGetStoredChainConfigResponse)(nil), "covalenthq.ewm.ewm.QueryGetStoredChainConfigResponse")
	proto.RegisterType((*QueryAllStoredChainConfigRequest)(nil), "covalenthq.ewm.ewm.QueryAllStoredChainConfigRequest")
	proto.RegisterType((*QueryAllStoredChainConfigResponse)(nil), "covalenthq.ewm.ewm.QueryAllStoredChainConfigResponse")
	proto.RegisterType((*QueryGetStoredProofSessionRequest)(nil), "covalenthq.ewm.ewm.QueryGetStoredProofSessionRequest")
	proto.RegisterType((*QueryGetStoredProofSessionResponse)(nil), "covalenthq.ewm.ewm.QueryGetStoredProofSessionResponse")
	proto.RegisterType((*QueryAllStoredProofSessionRequest)(nil), "covalenthq.ewm.ewm.QueryAllStoredProofSessionRequest")
	proto.RegisterType((*QueryAllStoredProofSessionResponse)(nil), "covalenthq.ewm.ewm.QueryAllStoredProofSessionResponse")
}

func init() { proto.RegisterFile("ewm/query.proto", fileDescriptor_d8bb227319b4ba40) }

var fileDescriptor_d8bb227319b4ba40 = []byte{
	// 982 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0x1b, 0xb6, 0x12, 0xc3, 0xa1, 0xbb, 0xd3, 0x20, 0xb1, 0x06, 0xa5, 0xdd, 0x11,
	0x62, 0x61, 0xa1, 0xf6, 0xb6, 0xa8, 0x49, 0xb6, 0xdb, 0x2d, 0xfd, 0x21, 0x51, 0x21, 0xf5, 0x50,
	0xd2, 0x03, 0x12, 0x48, 0x44, 0x4e, 0x3a, 0x71, 0x5c, 0x1c, 0x4f, 0x9a, 0x71, 0xa3, 0x56, 0x08,
	0x0e, 0x3d, 0x70, 0xe0, 0x84, 0x84, 0xf8, 0x2f, 0xf8, 0x33, 0x90, 0x28, 0xbf, 0x44, 0x51, 0x85,
	0xc4, 0x09, 0xa1, 0x96, 0x3f, 0x04, 0x79, 0x3c, 0x8e, 0xe3, 0x5f, 0x13, 0x3b, 0x32, 0xa7, 0xa6,
	0x9e, 0x79, 0xef, 0x7d, 0x3f, 0xef, 0xbd, 0x19, 0xbf, 0x04, 0x2e, 0x74, 0xe8, 0x88, 0xd8, 0xc4,
	0xd1, 0x4e, 0x4e, 0xc9, 0xf0, 0x5c, 0x1d, 0x0c, 0xa9, 0x43, 0x91, 0xd2, 0xa1, 0x23, 0xdd, 0x22,
	0xb6, 0xd3, 0x3b, 0x51, 0xc5, 0xba, 0xff, 0x57, 0xa9, 0x18, 0xd4, 0xa0, 0x7c, 0x9b, 0xe6, 0x7e,
	0xf2, 0x2c, 0x94, 0xd7, 0x0c, 0x4a, 0x0d, 0x8b, 0x68, 0xfa, 0xc0, 0xd4, 0x74, 0xdb, 0xa6, 0x8e,
	0xee, 0x98, 0xd4, 0x66, 0x62, 0xf5, 0x71, 0x87, 0xb2, 0x3e, 0x65, 0x5a, 0x5b, 0x67, 0xc4, 0x0b,
	0xa4, 0x8d, 0x56, 0xda, 0xc4, 0xd1, 0x57, 0xb4, 0x81, 0x6e, 0x98, 0x36, 0xdf, 0x2c, 0xf6, 0x56,
	0x7c, 0x41, 0x03, 0x7d, 0xa8, 0xf7, 0x7d, 0x0f, 0x0f, 0xfc, 0xa7, 0xec, 0x9c, 0x39, 0xa4, 0xdf,
	0x32, 0xed, 0xae, 0x1f, 0x7a, 0xc9, 0x5f, 0xb2, 0xcc, 0x11, 0x69, 0x0d, 0x86, 0x94, 0x76, 0x5b,
	0x8c, 0x30, 0x16, 0xb8, 0x5c, 0x1c, 0x1b, 0x3b, 0x74, 0x48, 0x8e, 0x5a, 0x9d, 0x9e, 0x6e, 0xda,
	0xad, 0x21, 0xb5, 0x88, 0xd8, 0xf0, 0x30, 0x71, 0x43, 0x87, 0xda, 0x5d, 0xd3, 0x10, 0x5b, 0x70,
	0x64, 0x4b, 0x42, 0x1c, 0x5c, 0x81, 0xe8, 0x43, 0x17, 0xee, 0x80, 0x2b, 0x6f, 0x92, 0x93, 0x53,
	0xc2, 0x1c, 0xfc, 0x11, 0x5c, 0x08, 0x3d, 0x65, 0x03, 0x6a, 0x33, 0x82, 0xb6, 0xe0, 0x9c, 0x47,
	0xf8, 0x0a, 0x58, 0x02, 0x6f, 0xbe, 0xb4, 0x8a, 0xd5, 0xf4, 0xa4, 0xab, 0x9e, 0xed, 0xce, 0x0b,
	0x97, 0x7f, 0x2f, 0x96, 0x9a, 0xc2, 0x0e, 0xbf, 0x0a, 0x1f, 0x70, 0xc7, 0x7b, 0xc4, 0x39, 0xe4,
	0x59, 0xf9, 0xc0, 0xee, 0x52, 0x3f, 0xea, 0x31, 0x54, 0x92, 0x16, 0x45, 0xf0, 0x7d, 0x08, 0x83,
	0xa7, 0x42, 0xc0, 0x1b, 0x32, 0x01, 0xc1, 0x6e, 0x21, 0x62, 0xc2, 0x1e, 0xd7, 0xe1, 0xa2, 0x1f,
	0x6b, 0xdf, 0x1c, 0x91, 0x03, 0x37, 0x35, 0x87, 0x5e, 0x66, 0x84, 0x1c, 0x54, 0x81, 0x77, 0x4d,
	0xfb, 0x88, 0x9c, 0xf1, 0x58, 0x2f, 0x36, 0xbd, 0x7f, 0xf0, 0x05, 0x80, 0x4b, 0xe9, 0x96, 0x42,
	0xeb, 0xa7, 0xf0, 0x9e, 0x15, 0x59, 0x13, 0x8a, 0xdf, 0x91, 0x29, 0x8e, 0xfa, 0x13, 0xba, 0x63,
	0xbe, 0xb0, 0x29, 0xd4, 0x6f, 0x5b, 0x56, 0x9a, 0xfa, 0xf7, 0x21, 0x0c, 0xfa, 0x74, 0x22, 0x5d,
	0x6e, 0x53, 0xab, 0x6e, 0x53, 0xab, 0xde, 0xe9, 0x11, 0x4d, 0xad, 0x1e, 0xe8, 0x06, 0x11, 0xb6,
	0xcd, 0x09, 0x4b, 0xfc, 0x8b, 0xcf, 0x9b, 0x18, 0x4b, 0xca, 0x5b, 0x2e, 0x8a, 0x17, 0xed, 0x85,
	0x60, 0xee, 0x70, 0x98, 0x47, 0x53, 0x61, 0x3c, 0x71, 0x21, 0x9a, 0x1a, 0xac, 0x8e, 0x5b, 0x8c,
	0x1f, 0x8a, 0x5d, 0xf7, 0xd8, 0x34, 0xa9, 0x45, 0xe4, 0x55, 0xff, 0x32, 0x68, 0x97, 0x98, 0x9d,
	0xc8, 0xc1, 0x27, 0x70, 0x9e, 0x85, 0x97, 0x44, 0xd6, 0xdf, 0x96, 0x36, 0x69, 0xd8, 0x44, 0x64,
	0x20, 0xea, 0x09, 0xf7, 0x84, 0xee, 0x6d, 0xcb, 0x4a, 0xd1, 0x5d, 0x54, 0xbd, 0x7f, 0x04, 0x41,
	0x6f, 0xe5, 0x42, 0x2d, 0x17, 0x83, 0x5a, 0x5c, 0xad, 0x1b, 0xc1, 0x41, 0x9d, 0x08, 0xbd, 0xcb,
	0x6f, 0x48, 0x79, 0xb5, 0xbf, 0x02, 0xf0, 0xa1, 0xc4, 0x54, 0x64, 0x41, 0x87, 0xf7, 0x59, 0x74,
	0x51, 0x24, 0x7e, 0x39, 0x63, 0x1e, 0x3c, 0x23, 0x91, 0x89, 0xb8, 0x37, 0x7c, 0x1c, 0x9c, 0xbd,
	0x54, 0x84, 0xa2, 0x0a, 0xff, 0xbb, 0x0f, 0x9d, 0x1c, 0x4c, 0x0e, 0x5d, 0x2e, 0x0e, 0xba, 0xb8,
	0x06, 0x78, 0x1a, 0xad, 0x62, 0xf6, 0x5b, 0xfe, 0x6b, 0x00, 0xb1, 0xcc, 0x56, 0x64, 0xe3, 0x08,
	0x22, 0x16, 0x5b, 0x15, 0x35, 0x50, 0xa7, 0xa7, 0x23, 0xe1, 0xee, 0x4b, 0xf0, 0x87, 0x3f, 0x8b,
	0x16, 0xe6, 0xff, 0xbc, 0xef, 0xaf, 0x7d, 0xf2, 0x94, 0x68, 0x53, 0xc8, 0xcb, 0x45, 0x92, 0x17,
	0xd6, 0x0a, 0xab, 0x3f, 0xcf, 0xc3, 0xbb, 0x9c, 0x0a, 0x7d, 0x07, 0xe0, 0x9c, 0x37, 0x9a, 0x20,
	0xa9, 0xce, 0xf8, 0x54, 0xa4, 0x68, 0x99, 0xf7, 0x7b, 0x0a, 0xf0, 0xe3, 0x8b, 0xeb, 0x7f, 0xbf,
	0xbd, 0xf3, 0x3a, 0xc2, 0x5a, 0x60, 0xa8, 0xf9, 0x43, 0x59, 0x78, 0x66, 0x44, 0xdf, 0x83, 0xc9,
	0xf9, 0x06, 0xad, 0x4d, 0x8d, 0x95, 0x34, 0x42, 0x29, 0xb5, 0xbc, 0x66, 0x42, 0xa9, 0xc6, 0x95,
	0xbe, 0x85, 0x1e, 0xc9, 0x94, 0x4e, 0xcc, 0xb1, 0xe8, 0x37, 0x00, 0xef, 0x45, 0x5f, 0xdf, 0xe8,
	0x59, 0x96, 0xe8, 0x29, 0x03, 0x8b, 0xb2, 0x31, 0x9b, 0xb1, 0x00, 0xd8, 0xe4, 0x00, 0x0d, 0x54,
	0x93, 0x01, 0xc4, 0xa7, 0x6d, 0xed, 0x73, 0x7e, 0xde, 0xbf, 0x40, 0x97, 0x00, 0x2e, 0x44, 0x9d,
	0x6f, 0x5b, 0x56, 0x06, 0xa4, 0xf4, 0x19, 0x2c, 0x03, 0x92, 0x64, 0xa8, 0xc2, 0x35, 0x8e, 0xf4,
	0x04, 0xa9, 0xf9, 0x90, 0xd0, 0x4f, 0x00, 0xce, 0x47, 0xde, 0xb5, 0x68, 0x3d, 0x53, 0x5f, 0x24,
	0x4e, 0x16, 0xca, 0xb3, 0x99, 0x6c, 0x05, 0xc4, 0x73, 0x0e, 0x51, 0x47, 0x6b, 0xd2, 0xc6, 0x8a,
	0x7e, 0xc7, 0x19, 0x97, 0xe5, 0x07, 0x00, 0x51, 0xc4, 0xb5, 0x5b, 0x95, 0xf5, 0x2c, 0x89, 0x9d,
	0x19, 0x27, 0x7d, 0xf2, 0xc1, 0x6b, 0x1c, 0x47, 0x43, 0xcb, 0xb9, 0x70, 0xd0, 0x1f, 0x00, 0xde,
	0x8f, 0xbd, 0x01, 0xd1, 0x46, 0xce, 0xc4, 0x86, 0xde, 0xfb, 0xca, 0xf3, 0x19, 0xad, 0x05, 0xc9,
	0x7b, 0x9c, 0xe4, 0x29, 0xaa, 0x67, 0x26, 0xf1, 0xbe, 0x5b, 0x8e, 0x4b, 0xf3, 0x2b, 0x80, 0x95,
	0x98, 0x7b, 0xb7, 0x38, 0x1b, 0x39, 0x13, 0x9c, 0x17, 0x4b, 0x36, 0x9f, 0xe0, 0x3a, 0xc7, 0x5a,
	0x41, 0x5a, 0x4e, 0x2c, 0xf4, 0xe7, 0xb8, 0xd3, 0x42, 0x57, 0x5a, 0x8e, 0x2c, 0x27, 0xdd, 0x00,
	0x9b, 0xb3, 0x9a, 0x0b, 0x9c, 0x2d, 0x8e, 0xb3, 0x8e, 0x1a, 0x19, 0x70, 0x92, 0x2f, 0xb6, 0x2b,
	0x00, 0x5f, 0x8e, 0x07, 0x70, 0xeb, 0x94, 0x23, 0xd3, 0xb3, 0xa1, 0x49, 0x27, 0x08, 0xdc, 0xe0,
	0x68, 0xab, 0xe8, 0x49, 0x5e, 0xb4, 0x9d, 0xbd, 0xcb, 0x9b, 0x2a, 0xb8, 0xba, 0xa9, 0x82, 0x7f,
	0x6e, 0xaa, 0xe0, 0x9b, 0xdb, 0x6a, 0xe9, 0xea, 0xb6, 0x5a, 0xfa, 0xeb, 0xb6, 0x5a, 0xfa, 0x78,
	0xd9, 0x30, 0x9d, 0xde, 0x69, 0x5b, 0xed, 0xd0, 0x7e, 0x92, 0xd7, 0xb3, 0xf1, 0x27, 0xe7, 0x7c,
	0x40, 0x58, 0x7b, 0x8e, 0xff, 0x06, 0xf2, 0xee, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x04, 0x19,
	0x59, 0x72, 0x51, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a SystemInfo by index.
	SystemInfo(ctx context.Context, in *QueryGetSystemInfoRequest, opts ...grpc.CallOption) (*QueryGetSystemInfoResponse, error)
	// Queries a LiveProofSession by index.
	LiveProofSession(ctx context.Context, in *QueryGetLiveProofSessionRequest, opts ...grpc.CallOption) (*QueryGetLiveProofSessionResponse, error)
	// Queries a list of LiveProofSession items.
	LiveProofSessionAll(ctx context.Context, in *QueryAllLiveProofSessionRequest, opts ...grpc.CallOption) (*QueryAllLiveProofSessionResponse, error)
	// Queries a StoredChainRole by index.
	StoredChainRole(ctx context.Context, in *QueryGetStoredChainRoleRequest, opts ...grpc.CallOption) (*QueryGetStoredChainRoleResponse, error)
	// Queries a list of StoredChainRole items.
	StoredChainRoleAll(ctx context.Context, in *QueryAllStoredChainRoleRequest, opts ...grpc.CallOption) (*QueryAllStoredChainRoleResponse, error)
	// Queries a StoredChainConfig by index.
	StoredChainConfig(ctx context.Context, in *QueryGetStoredChainConfigRequest, opts ...grpc.CallOption) (*QueryGetStoredChainConfigResponse, error)
	// Queries a list of StoredChainConfig items.
	StoredChainConfigAll(ctx context.Context, in *QueryAllStoredChainConfigRequest, opts ...grpc.CallOption) (*QueryAllStoredChainConfigResponse, error)
	// Queries a StoredProofSession by index.
	StoredProofSession(ctx context.Context, in *QueryGetStoredProofSessionRequest, opts ...grpc.CallOption) (*QueryGetStoredProofSessionResponse, error)
	// Queries a list of StoredProofSession items.
	StoredProofSessionAll(ctx context.Context, in *QueryAllStoredProofSessionRequest, opts ...grpc.CallOption) (*QueryAllStoredProofSessionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SystemInfo(ctx context.Context, in *QueryGetSystemInfoRequest, opts ...grpc.CallOption) (*QueryGetSystemInfoResponse, error) {
	out := new(QueryGetSystemInfoResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Query/SystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiveProofSession(ctx context.Context, in *QueryGetLiveProofSessionRequest, opts ...grpc.CallOption) (*QueryGetLiveProofSessionResponse, error) {
	out := new(QueryGetLiveProofSessionResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Query/LiveProofSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiveProofSessionAll(ctx context.Context, in *QueryAllLiveProofSessionRequest, opts ...grpc.CallOption) (*QueryAllLiveProofSessionResponse, error) {
	out := new(QueryAllLiveProofSessionResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Query/LiveProofSessionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredChainRole(ctx context.Context, in *QueryGetStoredChainRoleRequest, opts ...grpc.CallOption) (*QueryGetStoredChainRoleResponse, error) {
	out := new(QueryGetStoredChainRoleResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Query/StoredChainRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredChainRoleAll(ctx context.Context, in *QueryAllStoredChainRoleRequest, opts ...grpc.CallOption) (*QueryAllStoredChainRoleResponse, error) {
	out := new(QueryAllStoredChainRoleResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Query/StoredChainRoleAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredChainConfig(ctx context.Context, in *QueryGetStoredChainConfigRequest, opts ...grpc.CallOption) (*QueryGetStoredChainConfigResponse, error) {
	out := new(QueryGetStoredChainConfigResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Query/StoredChainConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredChainConfigAll(ctx context.Context, in *QueryAllStoredChainConfigRequest, opts ...grpc.CallOption) (*QueryAllStoredChainConfigResponse, error) {
	out := new(QueryAllStoredChainConfigResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Query/StoredChainConfigAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredProofSession(ctx context.Context, in *QueryGetStoredProofSessionRequest, opts ...grpc.CallOption) (*QueryGetStoredProofSessionResponse, error) {
	out := new(QueryGetStoredProofSessionResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Query/StoredProofSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StoredProofSessionAll(ctx context.Context, in *QueryAllStoredProofSessionRequest, opts ...grpc.CallOption) (*QueryAllStoredProofSessionResponse, error) {
	out := new(QueryAllStoredProofSessionResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Query/StoredProofSessionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a SystemInfo by index.
	SystemInfo(context.Context, *QueryGetSystemInfoRequest) (*QueryGetSystemInfoResponse, error)
	// Queries a LiveProofSession by index.
	LiveProofSession(context.Context, *QueryGetLiveProofSessionRequest) (*QueryGetLiveProofSessionResponse, error)
	// Queries a list of LiveProofSession items.
	LiveProofSessionAll(context.Context, *QueryAllLiveProofSessionRequest) (*QueryAllLiveProofSessionResponse, error)
	// Queries a StoredChainRole by index.
	StoredChainRole(context.Context, *QueryGetStoredChainRoleRequest) (*QueryGetStoredChainRoleResponse, error)
	// Queries a list of StoredChainRole items.
	StoredChainRoleAll(context.Context, *QueryAllStoredChainRoleRequest) (*QueryAllStoredChainRoleResponse, error)
	// Queries a StoredChainConfig by index.
	StoredChainConfig(context.Context, *QueryGetStoredChainConfigRequest) (*QueryGetStoredChainConfigResponse, error)
	// Queries a list of StoredChainConfig items.
	StoredChainConfigAll(context.Context, *QueryAllStoredChainConfigRequest) (*QueryAllStoredChainConfigResponse, error)
	// Queries a StoredProofSession by index.
	StoredProofSession(context.Context, *QueryGetStoredProofSessionRequest) (*QueryGetStoredProofSessionResponse, error)
	// Queries a list of StoredProofSession items.
	StoredProofSessionAll(context.Context, *QueryAllStoredProofSessionRequest) (*QueryAllStoredProofSessionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) SystemInfo(ctx context.Context, req *QueryGetSystemInfoRequest) (*QueryGetSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo not implemented")
}
func (*UnimplementedQueryServer) LiveProofSession(ctx context.Context, req *QueryGetLiveProofSessionRequest) (*QueryGetLiveProofSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveProofSession not implemented")
}
func (*UnimplementedQueryServer) LiveProofSessionAll(ctx context.Context, req *QueryAllLiveProofSessionRequest) (*QueryAllLiveProofSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveProofSessionAll not implemented")
}
func (*UnimplementedQueryServer) StoredChainRole(ctx context.Context, req *QueryGetStoredChainRoleRequest) (*QueryGetStoredChainRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredChainRole not implemented")
}
func (*UnimplementedQueryServer) StoredChainRoleAll(ctx context.Context, req *QueryAllStoredChainRoleRequest) (*QueryAllStoredChainRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredChainRoleAll not implemented")
}
func (*UnimplementedQueryServer) StoredChainConfig(ctx context.Context, req *QueryGetStoredChainConfigRequest) (*QueryGetStoredChainConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredChainConfig not implemented")
}
func (*UnimplementedQueryServer) StoredChainConfigAll(ctx context.Context, req *QueryAllStoredChainConfigRequest) (*QueryAllStoredChainConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredChainConfigAll not implemented")
}
func (*UnimplementedQueryServer) StoredProofSession(ctx context.Context, req *QueryGetStoredProofSessionRequest) (*QueryGetStoredProofSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredProofSession not implemented")
}
func (*UnimplementedQueryServer) StoredProofSessionAll(ctx context.Context, req *QueryAllStoredProofSessionRequest) (*QueryAllStoredProofSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoredProofSessionAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Query/SystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SystemInfo(ctx, req.(*QueryGetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiveProofSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiveProofSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiveProofSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Query/LiveProofSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiveProofSession(ctx, req.(*QueryGetLiveProofSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiveProofSessionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLiveProofSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiveProofSessionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Query/LiveProofSessionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiveProofSessionAll(ctx, req.(*QueryAllLiveProofSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredChainRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredChainRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredChainRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Query/StoredChainRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredChainRole(ctx, req.(*QueryGetStoredChainRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredChainRoleAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredChainRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredChainRoleAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Query/StoredChainRoleAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredChainRoleAll(ctx, req.(*QueryAllStoredChainRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredChainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredChainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredChainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Query/StoredChainConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredChainConfig(ctx, req.(*QueryGetStoredChainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredChainConfigAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredChainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredChainConfigAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Query/StoredChainConfigAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredChainConfigAll(ctx, req.(*QueryAllStoredChainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredProofSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStoredProofSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredProofSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Query/StoredProofSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredProofSession(ctx, req.(*QueryGetStoredProofSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StoredProofSessionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStoredProofSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StoredProofSessionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Query/StoredProofSessionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StoredProofSessionAll(ctx, req.(*QueryAllStoredProofSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "covalenthq.ewm.ewm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SystemInfo",
			Handler:    _Query_SystemInfo_Handler,
		},
		{
			MethodName: "LiveProofSession",
			Handler:    _Query_LiveProofSession_Handler,
		},
		{
			MethodName: "LiveProofSessionAll",
			Handler:    _Query_LiveProofSessionAll_Handler,
		},
		{
			MethodName: "StoredChainRole",
			Handler:    _Query_StoredChainRole_Handler,
		},
		{
			MethodName: "StoredChainRoleAll",
			Handler:    _Query_StoredChainRoleAll_Handler,
		},
		{
			MethodName: "StoredChainConfig",
			Handler:    _Query_StoredChainConfig_Handler,
		},
		{
			MethodName: "StoredChainConfigAll",
			Handler:    _Query_StoredChainConfigAll_Handler,
		},
		{
			MethodName: "StoredProofSession",
			Handler:    _Query_StoredProofSession_Handler,
		},
		{
			MethodName: "StoredProofSessionAll",
			Handler:    _Query_StoredProofSessionAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ewm/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SystemInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetLiveProofSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiveProofSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiveProofSessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLiveProofSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiveProofSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiveProofSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LiveProofSession.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLiveProofSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiveProofSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiveProofSessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLiveProofSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiveProofSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiveProofSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiveProofSession) > 0 {
		for iNdEx := len(m.LiveProofSession) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiveProofSession[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredChainRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredChainRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredChainRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredChainRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredChainRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredChainRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoredChainRole.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredChainRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredChainRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredChainRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredChainRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredChainRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredChainRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoredChainRole) > 0 {
		for iNdEx := len(m.StoredChainRole) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoredChainRole[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredChainConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredChainConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredChainConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredChainConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredChainConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredChainConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoredChainConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredChainConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredChainConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredChainConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredChainConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredChainConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredChainConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoredChainConfig) > 0 {
		for iNdEx := len(m.StoredChainConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoredChainConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredProofSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredProofSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredProofSessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStoredProofSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStoredProofSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStoredProofSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StoredProofSession.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredProofSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredProofSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredProofSessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStoredProofSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStoredProofSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStoredProofSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StoredProofSession) > 0 {
		for iNdEx := len(m.StoredProofSession) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StoredProofSession[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSystemInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSystemInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SystemInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetLiveProofSessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLiveProofSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiveProofSession.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLiveProofSessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLiveProofSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiveProofSession) > 0 {
		for _, e := range m.LiveProofSession {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredChainRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredChainRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoredChainRole.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoredChainRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoredChainRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoredChainRole) > 0 {
		for _, e := range m.StoredChainRole {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredChainConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredChainConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoredChainConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoredChainConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoredChainConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoredChainConfig) > 0 {
		for _, e := range m.StoredChainConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredProofSessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStoredProofSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoredProofSession.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStoredProofSessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStoredProofSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StoredProofSession) > 0 {
		for _, e := range m.StoredProofSession {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SystemInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiveProofSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiveProofSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiveProofSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiveProofSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiveProofSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiveProofSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveProofSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiveProofSession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiveProofSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiveProofSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiveProofSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiveProofSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiveProofSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiveProofSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveProofSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveProofSession = append(m.LiveProofSession, LiveProofSession{})
			if err := m.LiveProofSession[len(m.LiveProofSession)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredChainRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredChainRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredChainRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredChainRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredChainRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredChainRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredChainRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoredChainRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredChainRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredChainRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredChainRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredChainRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredChainRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredChainRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredChainRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredChainRole = append(m.StoredChainRole, StoredChainRole{})
			if err := m.StoredChainRole[len(m.StoredChainRole)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredChainConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredChainConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredChainConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredChainConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredChainConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredChainConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoredChainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredChainConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredChainConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredChainConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredChainConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredChainConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredChainConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredChainConfig = append(m.StoredChainConfig, StoredChainConfig{})
			if err := m.StoredChainConfig[len(m.StoredChainConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredProofSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredProofSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredProofSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStoredProofSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStoredProofSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStoredProofSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredProofSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoredProofSession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredProofSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredProofSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredProofSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStoredProofSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStoredProofSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStoredProofSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredProofSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredProofSession = append(m.StoredProofSession, StoredProofSession{})
			if err := m.StoredProofSession[len(m.StoredProofSession)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
