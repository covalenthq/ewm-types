// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ewm/stored_chain_config.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StoredChainConfig struct {
	Index             string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	ChainId           int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofType         string `protobuf:"bytes,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	SrcBlockTimeSec   string `protobuf:"bytes,4,opt,name=srcBlockTimeSec,proto3" json:"srcBlockTimeSec,omitempty"`
	SnkBlockTimeSec   string `protobuf:"bytes,5,opt,name=snkBlockTimeSec,proto3" json:"snkBlockTimeSec,omitempty"`
	QuorumReq         int32  `protobuf:"varint,6,opt,name=quorumReq,proto3" json:"quorumReq,omitempty"`
	RewardAlloc       string `protobuf:"bytes,7,opt,name=rewardAlloc,proto3" json:"rewardAlloc,omitempty"`
	MinStakeReq       string `protobuf:"bytes,8,opt,name=minStakeReq,proto3" json:"minStakeReq,omitempty"`
	MinSubmissionsReq int32  `protobuf:"varint,9,opt,name=minSubmissionsReq,proto3" json:"minSubmissionsReq,omitempty"`
	SessionTimeSec    string `protobuf:"bytes,10,opt,name=sessionTimeSec,proto3" json:"sessionTimeSec,omitempty"`
	Creator           string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	LiveMode          bool   `protobuf:"varint,12,opt,name=liveMode,proto3" json:"liveMode,omitempty"`
	SyncBlockLimit    uint64 `protobuf:"varint,13,opt,name=syncBlockLimit,proto3" json:"syncBlockLimit,omitempty"`
	Timestamp         string `protobuf:"bytes,14,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SyncLagLimit      uint64 `protobuf:"varint,15,opt,name=syncLagLimit,proto3" json:"syncLagLimit,omitempty"`
	SyncBlockStart    uint64 `protobuf:"varint,16,opt,name=syncBlockStart,proto3" json:"syncBlockStart,omitempty"`
	BridgeTxDayFreq   int32  `protobuf:"varint,17,opt,name=bridgeTxDayFreq,proto3" json:"bridgeTxDayFreq,omitempty"`
}

func (m *StoredChainConfig) Reset()         { *m = StoredChainConfig{} }
func (m *StoredChainConfig) String() string { return proto.CompactTextString(m) }
func (*StoredChainConfig) ProtoMessage()    {}
func (*StoredChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1c08a6ad1a7da5a, []int{0}
}
func (m *StoredChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredChainConfig.Merge(m, src)
}
func (m *StoredChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *StoredChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StoredChainConfig proto.InternalMessageInfo

func (m *StoredChainConfig) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StoredChainConfig) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *StoredChainConfig) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *StoredChainConfig) GetSrcBlockTimeSec() string {
	if m != nil {
		return m.SrcBlockTimeSec
	}
	return ""
}

func (m *StoredChainConfig) GetSnkBlockTimeSec() string {
	if m != nil {
		return m.SnkBlockTimeSec
	}
	return ""
}

func (m *StoredChainConfig) GetQuorumReq() int32 {
	if m != nil {
		return m.QuorumReq
	}
	return 0
}

func (m *StoredChainConfig) GetRewardAlloc() string {
	if m != nil {
		return m.RewardAlloc
	}
	return ""
}

func (m *StoredChainConfig) GetMinStakeReq() string {
	if m != nil {
		return m.MinStakeReq
	}
	return ""
}

func (m *StoredChainConfig) GetMinSubmissionsReq() int32 {
	if m != nil {
		return m.MinSubmissionsReq
	}
	return 0
}

func (m *StoredChainConfig) GetSessionTimeSec() string {
	if m != nil {
		return m.SessionTimeSec
	}
	return ""
}

func (m *StoredChainConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *StoredChainConfig) GetLiveMode() bool {
	if m != nil {
		return m.LiveMode
	}
	return false
}

func (m *StoredChainConfig) GetSyncBlockLimit() uint64 {
	if m != nil {
		return m.SyncBlockLimit
	}
	return 0
}

func (m *StoredChainConfig) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *StoredChainConfig) GetSyncLagLimit() uint64 {
	if m != nil {
		return m.SyncLagLimit
	}
	return 0
}

func (m *StoredChainConfig) GetSyncBlockStart() uint64 {
	if m != nil {
		return m.SyncBlockStart
	}
	return 0
}

func (m *StoredChainConfig) GetBridgeTxDayFreq() int32 {
	if m != nil {
		return m.BridgeTxDayFreq
	}
	return 0
}

func init() {
	proto.RegisterType((*StoredChainConfig)(nil), "covalenthq.covenet.covenet.StoredChainConfig")
}

func init() { proto.RegisterFile("ewm/stored_chain_config.proto", fileDescriptor_d1c08a6ad1a7da5a) }

var fileDescriptor_d1c08a6ad1a7da5a = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x1b, 0x68, 0xb7, 0xd6, 0x1b, 0x1b, 0xb5, 0x38, 0x58, 0x13, 0x8a, 0xc2, 0x0e, 0x28,
	0x07, 0x68, 0x0f, 0x7c, 0x02, 0x36, 0x04, 0x42, 0x1a, 0x97, 0xb4, 0x27, 0x2e, 0x93, 0xeb, 0xbc,
	0xb5, 0x56, 0x13, 0x3b, 0xb5, 0xdd, 0xd2, 0x7e, 0x0b, 0x3e, 0x16, 0xc7, 0x1d, 0xb9, 0x81, 0xda,
	0x2f, 0x82, 0xfc, 0xb2, 0xb4, 0x4d, 0x38, 0x25, 0xff, 0x9f, 0xff, 0xef, 0xff, 0xac, 0xe7, 0x47,
	0xde, 0x08, 0xbd, 0x02, 0x05, 0x6e, 0x68, 0x9d, 0x36, 0x90, 0xde, 0x8b, 0x19, 0x97, 0xea, 0x5e,
	0x68, 0xf5, 0x20, 0xa7, 0x83, 0xc2, 0x68, 0xa7, 0xe9, 0x95, 0xd0, 0x2b, 0x9e, 0x81, 0x72, 0xb3,
	0xc5, 0xe0, 0xc9, 0x5d, 0x7d, 0xaf, 0xff, 0xb4, 0x49, 0x7f, 0x84, 0x95, 0xb7, 0xbe, 0xf0, 0x16,
	0xeb, 0xe8, 0x2b, 0xd2, 0x91, 0x2a, 0x85, 0x35, 0x0b, 0xa2, 0x20, 0xee, 0x25, 0xa5, 0xa0, 0x8c,
	0x9c, 0x62, 0xfa, 0xd7, 0x94, 0x3d, 0x8b, 0x82, 0xb8, 0x93, 0x54, 0x92, 0xbe, 0x26, 0xbd, 0xc2,
	0x68, 0xfd, 0x30, 0xde, 0x14, 0xc0, 0x9e, 0x63, 0xcd, 0x01, 0xd0, 0x98, 0x5c, 0x5a, 0x23, 0x6e,
	0x32, 0x2d, 0xe6, 0x63, 0x99, 0xc3, 0x08, 0x04, 0x6b, 0xa3, 0xa7, 0x89, 0xd1, 0xa9, 0xe6, 0x35,
	0x67, 0xe7, 0xc9, 0x59, 0xc7, 0xbe, 0xe3, 0x62, 0xa9, 0xcd, 0x32, 0x4f, 0x60, 0xc1, 0x4e, 0xf0,
	0x36, 0x07, 0x40, 0x23, 0x72, 0x66, 0xe0, 0x07, 0x37, 0xe9, 0xc7, 0x2c, 0xd3, 0x82, 0x9d, 0x62,
	0xc6, 0x31, 0xf2, 0x8e, 0x5c, 0xaa, 0x91, 0xe3, 0x73, 0xf0, 0x09, 0xdd, 0xd2, 0x71, 0x84, 0xe8,
	0x3b, 0xd2, 0xf7, 0x72, 0x39, 0xc9, 0xa5, 0xb5, 0x52, 0x2b, 0xeb, 0x7d, 0x3d, 0xec, 0xf4, 0xff,
	0x01, 0x7d, 0x4b, 0x2e, 0x2c, 0xa0, 0xac, 0x2e, 0x4e, 0x30, 0xb2, 0x41, 0x71, 0x86, 0x06, 0xb8,
	0xd3, 0x86, 0x9d, 0xa1, 0xa1, 0x92, 0xf4, 0x8a, 0x74, 0x33, 0xb9, 0x82, 0x6f, 0x3a, 0x05, 0x76,
	0x1e, 0x05, 0x71, 0x37, 0xd9, 0x6b, 0x4c, 0xdf, 0xa8, 0x72, 0x56, 0x77, 0x32, 0x97, 0x8e, 0xbd,
	0x88, 0x82, 0xb8, 0x9d, 0x34, 0xa8, 0x9f, 0x8a, 0x93, 0x39, 0x58, 0xc7, 0xf3, 0x82, 0x5d, 0x94,
	0xef, 0xb0, 0x07, 0xf4, 0x9a, 0x9c, 0x7b, 0xff, 0x1d, 0x9f, 0x96, 0x19, 0x97, 0x98, 0x51, 0x63,
	0xb5, 0x4e, 0x23, 0xc7, 0x8d, 0x63, 0x2f, 0x1b, 0x9d, 0x90, 0xfa, 0x97, 0x9a, 0x18, 0x99, 0x4e,
	0x61, 0xbc, 0xfe, 0xc4, 0x37, 0x9f, 0x0d, 0x2c, 0x58, 0x1f, 0x67, 0xd3, 0xc4, 0x37, 0x5f, 0x7e,
	0x6d, 0xc3, 0xe0, 0x71, 0x1b, 0x06, 0x7f, 0xb7, 0x61, 0xf0, 0x73, 0x17, 0xb6, 0x1e, 0x77, 0x61,
	0xeb, 0xf7, 0x2e, 0x6c, 0x7d, 0x7f, 0x3f, 0x95, 0x6e, 0xb6, 0x9c, 0x0c, 0x84, 0xce, 0x87, 0x87,
	0x15, 0x1d, 0x56, 0x0b, 0xbd, 0xde, 0xff, 0xb9, 0x4d, 0x01, 0x76, 0x72, 0x82, 0xdb, 0xfc, 0xe1,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x15, 0x84, 0xb4, 0x59, 0xf2, 0x02, 0x00, 0x00,
}

func (m *StoredChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BridgeTxDayFreq != 0 {
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(m.BridgeTxDayFreq))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.SyncBlockStart != 0 {
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(m.SyncBlockStart))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SyncLagLimit != 0 {
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(m.SyncLagLimit))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x72
	}
	if m.SyncBlockLimit != 0 {
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(m.SyncBlockLimit))
		i--
		dAtA[i] = 0x68
	}
	if m.LiveMode {
		i--
		if m.LiveMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SessionTimeSec) > 0 {
		i -= len(m.SessionTimeSec)
		copy(dAtA[i:], m.SessionTimeSec)
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(len(m.SessionTimeSec)))
		i--
		dAtA[i] = 0x52
	}
	if m.MinSubmissionsReq != 0 {
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(m.MinSubmissionsReq))
		i--
		dAtA[i] = 0x48
	}
	if len(m.MinStakeReq) > 0 {
		i -= len(m.MinStakeReq)
		copy(dAtA[i:], m.MinStakeReq)
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(len(m.MinStakeReq)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RewardAlloc) > 0 {
		i -= len(m.RewardAlloc)
		copy(dAtA[i:], m.RewardAlloc)
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(len(m.RewardAlloc)))
		i--
		dAtA[i] = 0x3a
	}
	if m.QuorumReq != 0 {
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(m.QuorumReq))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SnkBlockTimeSec) > 0 {
		i -= len(m.SnkBlockTimeSec)
		copy(dAtA[i:], m.SnkBlockTimeSec)
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(len(m.SnkBlockTimeSec)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SrcBlockTimeSec) > 0 {
		i -= len(m.SrcBlockTimeSec)
		copy(dAtA[i:], m.SrcBlockTimeSec)
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(len(m.SrcBlockTimeSec)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStoredChainConfig(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoredChainConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoredChainConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoredChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStoredChainConfig(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovStoredChainConfig(uint64(m.ChainId))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovStoredChainConfig(uint64(l))
	}
	l = len(m.SrcBlockTimeSec)
	if l > 0 {
		n += 1 + l + sovStoredChainConfig(uint64(l))
	}
	l = len(m.SnkBlockTimeSec)
	if l > 0 {
		n += 1 + l + sovStoredChainConfig(uint64(l))
	}
	if m.QuorumReq != 0 {
		n += 1 + sovStoredChainConfig(uint64(m.QuorumReq))
	}
	l = len(m.RewardAlloc)
	if l > 0 {
		n += 1 + l + sovStoredChainConfig(uint64(l))
	}
	l = len(m.MinStakeReq)
	if l > 0 {
		n += 1 + l + sovStoredChainConfig(uint64(l))
	}
	if m.MinSubmissionsReq != 0 {
		n += 1 + sovStoredChainConfig(uint64(m.MinSubmissionsReq))
	}
	l = len(m.SessionTimeSec)
	if l > 0 {
		n += 1 + l + sovStoredChainConfig(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovStoredChainConfig(uint64(l))
	}
	if m.LiveMode {
		n += 2
	}
	if m.SyncBlockLimit != 0 {
		n += 1 + sovStoredChainConfig(uint64(m.SyncBlockLimit))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovStoredChainConfig(uint64(l))
	}
	if m.SyncLagLimit != 0 {
		n += 1 + sovStoredChainConfig(uint64(m.SyncLagLimit))
	}
	if m.SyncBlockStart != 0 {
		n += 2 + sovStoredChainConfig(uint64(m.SyncBlockStart))
	}
	if m.BridgeTxDayFreq != 0 {
		n += 2 + sovStoredChainConfig(uint64(m.BridgeTxDayFreq))
	}
	return n
}

func sovStoredChainConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoredChainConfig(x uint64) (n int) {
	return sovStoredChainConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoredChainConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcBlockTimeSec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcBlockTimeSec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnkBlockTimeSec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnkBlockTimeSec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumReq", wireType)
			}
			m.QuorumReq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuorumReq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAlloc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAlloc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeReq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinStakeReq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSubmissionsReq", wireType)
			}
			m.MinSubmissionsReq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSubmissionsReq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionTimeSec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionTimeSec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiveMode = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncBlockLimit", wireType)
			}
			m.SyncBlockLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncBlockLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncLagLimit", wireType)
			}
			m.SyncLagLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncLagLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncBlockStart", wireType)
			}
			m.SyncBlockStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncBlockStart |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeTxDayFreq", wireType)
			}
			m.BridgeTxDayFreq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeTxDayFreq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStoredChainConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStoredChainConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoredChainConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoredChainConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredChainConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoredChainConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoredChainConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoredChainConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoredChainConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoredChainConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoredChainConfig = fmt.Errorf("proto: unexpected end of group")
)
