// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ewm/stored_proof_session.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StoredProofSession struct {
	Index             string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	ChainId           int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofType         string `protobuf:"bytes,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	BlockHeight       uint64 `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockHash         string `protobuf:"bytes,5,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	ProofHash         string `protobuf:"bytes,6,opt,name=proofHash,proto3" json:"proofHash,omitempty"`
	StoreAddress      string `protobuf:"bytes,7,opt,name=storeAddress,proto3" json:"storeAddress,omitempty"`
	ProofCount        int32  `protobuf:"varint,8,opt,name=proofCount,proto3" json:"proofCount,omitempty"`
	SessionMembers    string `protobuf:"bytes,9,opt,name=sessionMembers,proto3" json:"sessionMembers,omitempty"`
	ArchivedTimestamp string `protobuf:"bytes,10,opt,name=archivedTimestamp,proto3" json:"archivedTimestamp,omitempty"`
	Finalized         bool   `protobuf:"varint,11,opt,name=finalized,proto3" json:"finalized,omitempty"`
	Creator           string `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *StoredProofSession) Reset()         { *m = StoredProofSession{} }
func (m *StoredProofSession) String() string { return proto.CompactTextString(m) }
func (*StoredProofSession) ProtoMessage()    {}
func (*StoredProofSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_db6a2afe1fc404dd, []int{0}
}
func (m *StoredProofSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredProofSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredProofSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredProofSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredProofSession.Merge(m, src)
}
func (m *StoredProofSession) XXX_Size() int {
	return m.Size()
}
func (m *StoredProofSession) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredProofSession.DiscardUnknown(m)
}

var xxx_messageInfo_StoredProofSession proto.InternalMessageInfo

func (m *StoredProofSession) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StoredProofSession) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *StoredProofSession) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *StoredProofSession) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *StoredProofSession) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *StoredProofSession) GetProofHash() string {
	if m != nil {
		return m.ProofHash
	}
	return ""
}

func (m *StoredProofSession) GetStoreAddress() string {
	if m != nil {
		return m.StoreAddress
	}
	return ""
}

func (m *StoredProofSession) GetProofCount() int32 {
	if m != nil {
		return m.ProofCount
	}
	return 0
}

func (m *StoredProofSession) GetSessionMembers() string {
	if m != nil {
		return m.SessionMembers
	}
	return ""
}

func (m *StoredProofSession) GetArchivedTimestamp() string {
	if m != nil {
		return m.ArchivedTimestamp
	}
	return ""
}

func (m *StoredProofSession) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

func (m *StoredProofSession) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*StoredProofSession)(nil), "covalenthq.ewm.ewm.StoredProofSession")
}

func init() {
	proto.RegisterFile("ewm/stored_proof_session.proto", fileDescriptor_db6a2afe1fc404dd)
}

var fileDescriptor_db6a2afe1fc404dd = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcd, 0x4e, 0xfa, 0x40,
	0x14, 0xc5, 0x99, 0x3f, 0xdf, 0x03, 0xf9, 0x27, 0x4e, 0x5c, 0x4c, 0x8c, 0x69, 0x1a, 0x16, 0xa6,
	0x0b, 0x85, 0x85, 0x4f, 0xa0, 0x2e, 0xd4, 0x85, 0x89, 0x29, 0xac, 0xdc, 0x90, 0x7e, 0x5c, 0xe8,
	0x44, 0x3a, 0x53, 0x67, 0x06, 0x02, 0x3e, 0x85, 0xf1, 0xa9, 0x5c, 0xb2, 0x74, 0x69, 0xe0, 0x45,
	0x0c, 0xb7, 0x14, 0x50, 0x57, 0xed, 0x39, 0xf7, 0xfe, 0x4e, 0xa7, 0x77, 0x2e, 0xed, 0x44, 0x6a,
	0x06, 0x12, 0x6c, 0xcf, 0x58, 0xa5, 0x21, 0x1e, 0x66, 0x5a, 0xa9, 0xd1, 0xd0, 0x80, 0x31, 0x42,
	0xc9, 0x6e, 0xa6, 0x95, 0x55, 0xec, 0x24, 0x52, 0xb3, 0x60, 0x02, 0xd2, 0x26, 0x2f, 0xdd, 0x6d,
	0x7b, 0xf1, 0xec, 0xbc, 0x97, 0x29, 0xeb, 0x23, 0xfa, 0xb8, 0x21, 0xfb, 0x39, 0xc8, 0x8e, 0x69,
	0x55, 0xc8, 0x18, 0xe6, 0x9c, 0xb8, 0xc4, 0x6b, 0xfa, 0xb9, 0x60, 0x9c, 0xd6, 0xa3, 0x24, 0x10,
	0xf2, 0x3e, 0xe6, 0xff, 0x5c, 0xe2, 0x55, 0xfd, 0x42, 0xb2, 0x53, 0xda, 0xc4, 0x2f, 0x0f, 0x16,
	0x19, 0xf0, 0x32, 0x32, 0x7b, 0x83, 0xb9, 0xb4, 0x15, 0x4e, 0x54, 0xf4, 0x7c, 0x07, 0x62, 0x9c,
	0x58, 0x5e, 0x71, 0x89, 0x57, 0xf1, 0x0f, 0xad, 0x0d, 0x9f, 0xcb, 0xc0, 0x24, 0xbc, 0x9a, 0xf3,
	0x3b, 0x63, 0x97, 0x8e, 0xd5, 0xda, 0x41, 0x3a, 0x56, 0x3b, 0xb4, 0x8d, 0x3f, 0x7f, 0x15, 0xc7,
	0x1a, 0x8c, 0xe1, 0x75, 0x6c, 0xf8, 0xe1, 0x31, 0x87, 0x52, 0x04, 0x6e, 0xd4, 0x54, 0x5a, 0xde,
	0xc0, 0xc3, 0x1f, 0x38, 0xec, 0x8c, 0xfe, 0xdf, 0xce, 0xec, 0x01, 0xd2, 0x10, 0xb4, 0xe1, 0x4d,
	0x4c, 0xf9, 0xe5, 0xb2, 0x73, 0x7a, 0x14, 0xe8, 0x28, 0x11, 0x33, 0x88, 0x07, 0x22, 0x05, 0x63,
	0x83, 0x34, 0xe3, 0x14, 0x5b, 0xff, 0x16, 0x36, 0xe7, 0x1e, 0x09, 0x19, 0x4c, 0xc4, 0x2b, 0xc4,
	0xbc, 0xe5, 0x12, 0xaf, 0xe1, 0xef, 0x0d, 0x9c, 0xa6, 0x86, 0xc0, 0x2a, 0xcd, 0xdb, 0x98, 0x50,
	0xc8, 0xeb, 0xdb, 0x8f, 0x95, 0x43, 0x96, 0x2b, 0x87, 0x7c, 0xad, 0x1c, 0xf2, 0xb6, 0x76, 0x4a,
	0xcb, 0xb5, 0x53, 0xfa, 0x5c, 0x3b, 0xa5, 0xa7, 0x8b, 0xb1, 0xb0, 0xc9, 0x34, 0xec, 0x46, 0x2a,
	0xed, 0xed, 0x6f, 0xb5, 0x57, 0x2c, 0xc1, 0x7c, 0xf7, 0x66, 0x17, 0x19, 0x98, 0xb0, 0x86, 0x0b,
	0x70, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x69, 0x5d, 0xe6, 0x26, 0x02, 0x00, 0x00,
}

func (m *StoredProofSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredProofSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredProofSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintStoredProofSession(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x62
	}
	if m.Finalized {
		i--
		if m.Finalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.ArchivedTimestamp) > 0 {
		i -= len(m.ArchivedTimestamp)
		copy(dAtA[i:], m.ArchivedTimestamp)
		i = encodeVarintStoredProofSession(dAtA, i, uint64(len(m.ArchivedTimestamp)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SessionMembers) > 0 {
		i -= len(m.SessionMembers)
		copy(dAtA[i:], m.SessionMembers)
		i = encodeVarintStoredProofSession(dAtA, i, uint64(len(m.SessionMembers)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ProofCount != 0 {
		i = encodeVarintStoredProofSession(dAtA, i, uint64(m.ProofCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.StoreAddress) > 0 {
		i -= len(m.StoreAddress)
		copy(dAtA[i:], m.StoreAddress)
		i = encodeVarintStoredProofSession(dAtA, i, uint64(len(m.StoreAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProofHash) > 0 {
		i -= len(m.ProofHash)
		copy(dAtA[i:], m.ProofHash)
		i = encodeVarintStoredProofSession(dAtA, i, uint64(len(m.ProofHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintStoredProofSession(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintStoredProofSession(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintStoredProofSession(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintStoredProofSession(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStoredProofSession(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoredProofSession(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoredProofSession(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoredProofSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStoredProofSession(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovStoredProofSession(uint64(m.ChainId))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovStoredProofSession(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovStoredProofSession(uint64(m.BlockHeight))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovStoredProofSession(uint64(l))
	}
	l = len(m.ProofHash)
	if l > 0 {
		n += 1 + l + sovStoredProofSession(uint64(l))
	}
	l = len(m.StoreAddress)
	if l > 0 {
		n += 1 + l + sovStoredProofSession(uint64(l))
	}
	if m.ProofCount != 0 {
		n += 1 + sovStoredProofSession(uint64(m.ProofCount))
	}
	l = len(m.SessionMembers)
	if l > 0 {
		n += 1 + l + sovStoredProofSession(uint64(l))
	}
	l = len(m.ArchivedTimestamp)
	if l > 0 {
		n += 1 + l + sovStoredProofSession(uint64(l))
	}
	if m.Finalized {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovStoredProofSession(uint64(l))
	}
	return n
}

func sovStoredProofSession(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoredProofSession(x uint64) (n int) {
	return sovStoredProofSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredProofSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoredProofSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredProofSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredProofSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofCount", wireType)
			}
			m.ProofCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMembers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionMembers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchivedTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArchivedTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finalized = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoredProofSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStoredProofSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoredProofSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoredProofSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredProofSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoredProofSession
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoredProofSession
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoredProofSession
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoredProofSession        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoredProofSession          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoredProofSession = fmt.Errorf("proto: unexpected end of group")
)
