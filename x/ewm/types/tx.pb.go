// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ewm/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateProof struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId      int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofType    string `protobuf:"bytes,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	BlockHeight  uint64 `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockHash    string `protobuf:"bytes,5,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	ProofHash    string `protobuf:"bytes,6,opt,name=proofHash,proto3" json:"proofHash,omitempty"`
	StoreAddress string `protobuf:"bytes,7,opt,name=storeAddress,proto3" json:"storeAddress,omitempty"`
}

func (m *MsgCreateProof) Reset()         { *m = MsgCreateProof{} }
func (m *MsgCreateProof) String() string { return proto.CompactTextString(m) }
func (*MsgCreateProof) ProtoMessage()    {}
func (*MsgCreateProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{0}
}
func (m *MsgCreateProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateProof.Merge(m, src)
}
func (m *MsgCreateProof) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateProof.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateProof proto.InternalMessageInfo

func (m *MsgCreateProof) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateProof) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgCreateProof) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *MsgCreateProof) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgCreateProof) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *MsgCreateProof) GetProofHash() string {
	if m != nil {
		return m.ProofHash
	}
	return ""
}

func (m *MsgCreateProof) GetStoreAddress() string {
	if m != nil {
		return m.StoreAddress
	}
	return ""
}

type MsgCreateProofResponse struct {
	ProofIndex string `protobuf:"bytes,1,opt,name=proofIndex,proto3" json:"proofIndex,omitempty"`
}

func (m *MsgCreateProofResponse) Reset()         { *m = MsgCreateProofResponse{} }
func (m *MsgCreateProofResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateProofResponse) ProtoMessage()    {}
func (*MsgCreateProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{1}
}
func (m *MsgCreateProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateProofResponse.Merge(m, src)
}
func (m *MsgCreateProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateProofResponse proto.InternalMessageInfo

func (m *MsgCreateProofResponse) GetProofIndex() string {
	if m != nil {
		return m.ProofIndex
	}
	return ""
}

type MsgAssignProofSequencer struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId          int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	SequencerAddress string `protobuf:"bytes,3,opt,name=sequencerAddress,proto3" json:"sequencerAddress,omitempty"`
	ProofType        string `protobuf:"bytes,4,opt,name=proofType,proto3" json:"proofType,omitempty"`
}

func (m *MsgAssignProofSequencer) Reset()         { *m = MsgAssignProofSequencer{} }
func (m *MsgAssignProofSequencer) String() string { return proto.CompactTextString(m) }
func (*MsgAssignProofSequencer) ProtoMessage()    {}
func (*MsgAssignProofSequencer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{2}
}
func (m *MsgAssignProofSequencer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignProofSequencer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignProofSequencer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignProofSequencer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignProofSequencer.Merge(m, src)
}
func (m *MsgAssignProofSequencer) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignProofSequencer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignProofSequencer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignProofSequencer proto.InternalMessageInfo

func (m *MsgAssignProofSequencer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAssignProofSequencer) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAssignProofSequencer) GetSequencerAddress() string {
	if m != nil {
		return m.SequencerAddress
	}
	return ""
}

func (m *MsgAssignProofSequencer) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

type MsgAssignProofSequencerResponse struct {
	SequencerIndex string `protobuf:"bytes,1,opt,name=sequencerIndex,proto3" json:"sequencerIndex,omitempty"`
}

func (m *MsgAssignProofSequencerResponse) Reset()         { *m = MsgAssignProofSequencerResponse{} }
func (m *MsgAssignProofSequencerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAssignProofSequencerResponse) ProtoMessage()    {}
func (*MsgAssignProofSequencerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{3}
}
func (m *MsgAssignProofSequencerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignProofSequencerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignProofSequencerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignProofSequencerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignProofSequencerResponse.Merge(m, src)
}
func (m *MsgAssignProofSequencerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignProofSequencerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignProofSequencerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignProofSequencerResponse proto.InternalMessageInfo

func (m *MsgAssignProofSequencerResponse) GetSequencerIndex() string {
	if m != nil {
		return m.SequencerIndex
	}
	return ""
}

type MsgAssignProofOperator struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId         int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	OperatorAddress string `protobuf:"bytes,3,opt,name=operatorAddress,proto3" json:"operatorAddress,omitempty"`
	ProofType       string `protobuf:"bytes,4,opt,name=proofType,proto3" json:"proofType,omitempty"`
}

func (m *MsgAssignProofOperator) Reset()         { *m = MsgAssignProofOperator{} }
func (m *MsgAssignProofOperator) String() string { return proto.CompactTextString(m) }
func (*MsgAssignProofOperator) ProtoMessage()    {}
func (*MsgAssignProofOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{4}
}
func (m *MsgAssignProofOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignProofOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignProofOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignProofOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignProofOperator.Merge(m, src)
}
func (m *MsgAssignProofOperator) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignProofOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignProofOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignProofOperator proto.InternalMessageInfo

func (m *MsgAssignProofOperator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAssignProofOperator) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAssignProofOperator) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *MsgAssignProofOperator) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

type MsgAssignProofOperatorResponse struct {
	OperatorIndex string `protobuf:"bytes,1,opt,name=operatorIndex,proto3" json:"operatorIndex,omitempty"`
}

func (m *MsgAssignProofOperatorResponse) Reset()         { *m = MsgAssignProofOperatorResponse{} }
func (m *MsgAssignProofOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAssignProofOperatorResponse) ProtoMessage()    {}
func (*MsgAssignProofOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{5}
}
func (m *MsgAssignProofOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignProofOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignProofOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignProofOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignProofOperatorResponse.Merge(m, src)
}
func (m *MsgAssignProofOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignProofOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignProofOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignProofOperatorResponse proto.InternalMessageInfo

func (m *MsgAssignProofOperatorResponse) GetOperatorIndex() string {
	if m != nil {
		return m.OperatorIndex
	}
	return ""
}

type MsgAssignProofValidator struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId          int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ValidatorAddress string `protobuf:"bytes,3,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	ProofType        string `protobuf:"bytes,4,opt,name=proofType,proto3" json:"proofType,omitempty"`
}

func (m *MsgAssignProofValidator) Reset()         { *m = MsgAssignProofValidator{} }
func (m *MsgAssignProofValidator) String() string { return proto.CompactTextString(m) }
func (*MsgAssignProofValidator) ProtoMessage()    {}
func (*MsgAssignProofValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{6}
}
func (m *MsgAssignProofValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignProofValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignProofValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignProofValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignProofValidator.Merge(m, src)
}
func (m *MsgAssignProofValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignProofValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignProofValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignProofValidator proto.InternalMessageInfo

func (m *MsgAssignProofValidator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAssignProofValidator) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAssignProofValidator) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgAssignProofValidator) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

type MsgAssignProofValidatorResponse struct {
	ValidatorIndex string `protobuf:"bytes,1,opt,name=validatorIndex,proto3" json:"validatorIndex,omitempty"`
}

func (m *MsgAssignProofValidatorResponse) Reset()         { *m = MsgAssignProofValidatorResponse{} }
func (m *MsgAssignProofValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAssignProofValidatorResponse) ProtoMessage()    {}
func (*MsgAssignProofValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{7}
}
func (m *MsgAssignProofValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignProofValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignProofValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignProofValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignProofValidatorResponse.Merge(m, src)
}
func (m *MsgAssignProofValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignProofValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignProofValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignProofValidatorResponse proto.InternalMessageInfo

func (m *MsgAssignProofValidatorResponse) GetValidatorIndex() string {
	if m != nil {
		return m.ValidatorIndex
	}
	return ""
}

type MsgInitChainRole struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId        int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofSequencer string `protobuf:"bytes,3,opt,name=proofSequencer,proto3" json:"proofSequencer,omitempty"`
	ProofOperator  string `protobuf:"bytes,4,opt,name=proofOperator,proto3" json:"proofOperator,omitempty"`
	ProofValidator string `protobuf:"bytes,5,opt,name=proofValidator,proto3" json:"proofValidator,omitempty"`
	ProofType      string `protobuf:"bytes,6,opt,name=proofType,proto3" json:"proofType,omitempty"`
}

func (m *MsgInitChainRole) Reset()         { *m = MsgInitChainRole{} }
func (m *MsgInitChainRole) String() string { return proto.CompactTextString(m) }
func (*MsgInitChainRole) ProtoMessage()    {}
func (*MsgInitChainRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{8}
}
func (m *MsgInitChainRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitChainRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitChainRole.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitChainRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitChainRole.Merge(m, src)
}
func (m *MsgInitChainRole) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitChainRole) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitChainRole.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitChainRole proto.InternalMessageInfo

func (m *MsgInitChainRole) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInitChainRole) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgInitChainRole) GetProofSequencer() string {
	if m != nil {
		return m.ProofSequencer
	}
	return ""
}

func (m *MsgInitChainRole) GetProofOperator() string {
	if m != nil {
		return m.ProofOperator
	}
	return ""
}

func (m *MsgInitChainRole) GetProofValidator() string {
	if m != nil {
		return m.ProofValidator
	}
	return ""
}

func (m *MsgInitChainRole) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

type MsgInitChainRoleResponse struct {
	ChainRoleIndex string `protobuf:"bytes,1,opt,name=chainRoleIndex,proto3" json:"chainRoleIndex,omitempty"`
}

func (m *MsgInitChainRoleResponse) Reset()         { *m = MsgInitChainRoleResponse{} }
func (m *MsgInitChainRoleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitChainRoleResponse) ProtoMessage()    {}
func (*MsgInitChainRoleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{9}
}
func (m *MsgInitChainRoleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitChainRoleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitChainRoleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitChainRoleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitChainRoleResponse.Merge(m, src)
}
func (m *MsgInitChainRoleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitChainRoleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitChainRoleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitChainRoleResponse proto.InternalMessageInfo

func (m *MsgInitChainRoleResponse) GetChainRoleIndex() string {
	if m != nil {
		return m.ChainRoleIndex
	}
	return ""
}

type MsgInitChainConfig struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId           int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofType         string `protobuf:"bytes,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	SrcBlockTimeSec   string `protobuf:"bytes,4,opt,name=srcBlockTimeSec,proto3" json:"srcBlockTimeSec,omitempty"`
	SnkBlockTimeSec   string `protobuf:"bytes,5,opt,name=snkBlockTimeSec,proto3" json:"snkBlockTimeSec,omitempty"`
	QuorumReq         int32  `protobuf:"varint,6,opt,name=quorumReq,proto3" json:"quorumReq,omitempty"`
	RewardAlloc       string `protobuf:"bytes,7,opt,name=rewardAlloc,proto3" json:"rewardAlloc,omitempty"`
	MinStakeReq       string `protobuf:"bytes,8,opt,name=minStakeReq,proto3" json:"minStakeReq,omitempty"`
	MinSubmissionsReq int32  `protobuf:"varint,9,opt,name=minSubmissionsReq,proto3" json:"minSubmissionsReq,omitempty"`
	SessionTimeSec    string `protobuf:"bytes,10,opt,name=sessionTimeSec,proto3" json:"sessionTimeSec,omitempty"`
	LiveMode          bool   `protobuf:"varint,11,opt,name=liveMode,proto3" json:"liveMode,omitempty"`
	SyncBlockLimit    uint64 `protobuf:"varint,12,opt,name=syncBlockLimit,proto3" json:"syncBlockLimit,omitempty"`
}

func (m *MsgInitChainConfig) Reset()         { *m = MsgInitChainConfig{} }
func (m *MsgInitChainConfig) String() string { return proto.CompactTextString(m) }
func (*MsgInitChainConfig) ProtoMessage()    {}
func (*MsgInitChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{10}
}
func (m *MsgInitChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitChainConfig.Merge(m, src)
}
func (m *MsgInitChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitChainConfig proto.InternalMessageInfo

func (m *MsgInitChainConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInitChainConfig) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgInitChainConfig) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *MsgInitChainConfig) GetSrcBlockTimeSec() string {
	if m != nil {
		return m.SrcBlockTimeSec
	}
	return ""
}

func (m *MsgInitChainConfig) GetSnkBlockTimeSec() string {
	if m != nil {
		return m.SnkBlockTimeSec
	}
	return ""
}

func (m *MsgInitChainConfig) GetQuorumReq() int32 {
	if m != nil {
		return m.QuorumReq
	}
	return 0
}

func (m *MsgInitChainConfig) GetRewardAlloc() string {
	if m != nil {
		return m.RewardAlloc
	}
	return ""
}

func (m *MsgInitChainConfig) GetMinStakeReq() string {
	if m != nil {
		return m.MinStakeReq
	}
	return ""
}

func (m *MsgInitChainConfig) GetMinSubmissionsReq() int32 {
	if m != nil {
		return m.MinSubmissionsReq
	}
	return 0
}

func (m *MsgInitChainConfig) GetSessionTimeSec() string {
	if m != nil {
		return m.SessionTimeSec
	}
	return ""
}

func (m *MsgInitChainConfig) GetLiveMode() bool {
	if m != nil {
		return m.LiveMode
	}
	return false
}

func (m *MsgInitChainConfig) GetSyncBlockLimit() uint64 {
	if m != nil {
		return m.SyncBlockLimit
	}
	return 0
}

type MsgInitChainConfigResponse struct {
	ChainConfigIndex string `protobuf:"bytes,1,opt,name=chainConfigIndex,proto3" json:"chainConfigIndex,omitempty"`
}

func (m *MsgInitChainConfigResponse) Reset()         { *m = MsgInitChainConfigResponse{} }
func (m *MsgInitChainConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitChainConfigResponse) ProtoMessage()    {}
func (*MsgInitChainConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{11}
}
func (m *MsgInitChainConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitChainConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitChainConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitChainConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitChainConfigResponse.Merge(m, src)
}
func (m *MsgInitChainConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitChainConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitChainConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitChainConfigResponse proto.InternalMessageInfo

func (m *MsgInitChainConfigResponse) GetChainConfigIndex() string {
	if m != nil {
		return m.ChainConfigIndex
	}
	return ""
}

type MsgRemoveProofOperator struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId         int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	OperatorAddress string `protobuf:"bytes,3,opt,name=operatorAddress,proto3" json:"operatorAddress,omitempty"`
	ProofType       string `protobuf:"bytes,4,opt,name=proofType,proto3" json:"proofType,omitempty"`
}

func (m *MsgRemoveProofOperator) Reset()         { *m = MsgRemoveProofOperator{} }
func (m *MsgRemoveProofOperator) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveProofOperator) ProtoMessage()    {}
func (*MsgRemoveProofOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{12}
}
func (m *MsgRemoveProofOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveProofOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveProofOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveProofOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveProofOperator.Merge(m, src)
}
func (m *MsgRemoveProofOperator) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveProofOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveProofOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveProofOperator proto.InternalMessageInfo

func (m *MsgRemoveProofOperator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveProofOperator) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgRemoveProofOperator) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *MsgRemoveProofOperator) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

type MsgRemoveProofOperatorResponse struct {
	OperatorIndex string `protobuf:"bytes,1,opt,name=operatorIndex,proto3" json:"operatorIndex,omitempty"`
}

func (m *MsgRemoveProofOperatorResponse) Reset()         { *m = MsgRemoveProofOperatorResponse{} }
func (m *MsgRemoveProofOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveProofOperatorResponse) ProtoMessage()    {}
func (*MsgRemoveProofOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{13}
}
func (m *MsgRemoveProofOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveProofOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveProofOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveProofOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveProofOperatorResponse.Merge(m, src)
}
func (m *MsgRemoveProofOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveProofOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveProofOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveProofOperatorResponse proto.InternalMessageInfo

func (m *MsgRemoveProofOperatorResponse) GetOperatorIndex() string {
	if m != nil {
		return m.OperatorIndex
	}
	return ""
}

type MsgRemoveProofSequencer struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId          int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	SequencerAddress string `protobuf:"bytes,3,opt,name=sequencerAddress,proto3" json:"sequencerAddress,omitempty"`
	ProofType        string `protobuf:"bytes,4,opt,name=proofType,proto3" json:"proofType,omitempty"`
}

func (m *MsgRemoveProofSequencer) Reset()         { *m = MsgRemoveProofSequencer{} }
func (m *MsgRemoveProofSequencer) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveProofSequencer) ProtoMessage()    {}
func (*MsgRemoveProofSequencer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{14}
}
func (m *MsgRemoveProofSequencer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveProofSequencer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveProofSequencer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveProofSequencer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveProofSequencer.Merge(m, src)
}
func (m *MsgRemoveProofSequencer) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveProofSequencer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveProofSequencer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveProofSequencer proto.InternalMessageInfo

func (m *MsgRemoveProofSequencer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveProofSequencer) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgRemoveProofSequencer) GetSequencerAddress() string {
	if m != nil {
		return m.SequencerAddress
	}
	return ""
}

func (m *MsgRemoveProofSequencer) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

type MsgRemoveProofSequencerResponse struct {
	SequencerIndex string `protobuf:"bytes,1,opt,name=sequencerIndex,proto3" json:"sequencerIndex,omitempty"`
}

func (m *MsgRemoveProofSequencerResponse) Reset()         { *m = MsgRemoveProofSequencerResponse{} }
func (m *MsgRemoveProofSequencerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveProofSequencerResponse) ProtoMessage()    {}
func (*MsgRemoveProofSequencerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{15}
}
func (m *MsgRemoveProofSequencerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveProofSequencerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveProofSequencerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveProofSequencerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveProofSequencerResponse.Merge(m, src)
}
func (m *MsgRemoveProofSequencerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveProofSequencerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveProofSequencerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveProofSequencerResponse proto.InternalMessageInfo

func (m *MsgRemoveProofSequencerResponse) GetSequencerIndex() string {
	if m != nil {
		return m.SequencerIndex
	}
	return ""
}

type MsgRemoveProofValidator struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId          int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ValidatorAddress string `protobuf:"bytes,3,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	ProofType        string `protobuf:"bytes,4,opt,name=proofType,proto3" json:"proofType,omitempty"`
}

func (m *MsgRemoveProofValidator) Reset()         { *m = MsgRemoveProofValidator{} }
func (m *MsgRemoveProofValidator) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveProofValidator) ProtoMessage()    {}
func (*MsgRemoveProofValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{16}
}
func (m *MsgRemoveProofValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveProofValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveProofValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveProofValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveProofValidator.Merge(m, src)
}
func (m *MsgRemoveProofValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveProofValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveProofValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveProofValidator proto.InternalMessageInfo

func (m *MsgRemoveProofValidator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveProofValidator) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgRemoveProofValidator) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgRemoveProofValidator) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

type MsgRemoveProofValidatorResponse struct {
	ValidatorIndex string `protobuf:"bytes,1,opt,name=validatorIndex,proto3" json:"validatorIndex,omitempty"`
}

func (m *MsgRemoveProofValidatorResponse) Reset()         { *m = MsgRemoveProofValidatorResponse{} }
func (m *MsgRemoveProofValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveProofValidatorResponse) ProtoMessage()    {}
func (*MsgRemoveProofValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{17}
}
func (m *MsgRemoveProofValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveProofValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveProofValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveProofValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveProofValidatorResponse.Merge(m, src)
}
func (m *MsgRemoveProofValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveProofValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveProofValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveProofValidatorResponse proto.InternalMessageInfo

func (m *MsgRemoveProofValidatorResponse) GetValidatorIndex() string {
	if m != nil {
		return m.ValidatorIndex
	}
	return ""
}

type MsgUpdateChainProofConfig struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId           int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofType         string `protobuf:"bytes,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	QuorumReq         int32  `protobuf:"varint,4,opt,name=quorumReq,proto3" json:"quorumReq,omitempty"`
	RewardAlloc       string `protobuf:"bytes,5,opt,name=rewardAlloc,proto3" json:"rewardAlloc,omitempty"`
	MinStakeReq       string `protobuf:"bytes,6,opt,name=minStakeReq,proto3" json:"minStakeReq,omitempty"`
	MinSubmissionsReq int32  `protobuf:"varint,7,opt,name=minSubmissionsReq,proto3" json:"minSubmissionsReq,omitempty"`
	SessionTimeSec    string `protobuf:"bytes,8,opt,name=sessionTimeSec,proto3" json:"sessionTimeSec,omitempty"`
	LiveMode          bool   `protobuf:"varint,9,opt,name=liveMode,proto3" json:"liveMode,omitempty"`
}

func (m *MsgUpdateChainProofConfig) Reset()         { *m = MsgUpdateChainProofConfig{} }
func (m *MsgUpdateChainProofConfig) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChainProofConfig) ProtoMessage()    {}
func (*MsgUpdateChainProofConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{18}
}
func (m *MsgUpdateChainProofConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChainProofConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChainProofConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChainProofConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChainProofConfig.Merge(m, src)
}
func (m *MsgUpdateChainProofConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChainProofConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChainProofConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChainProofConfig proto.InternalMessageInfo

func (m *MsgUpdateChainProofConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateChainProofConfig) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgUpdateChainProofConfig) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *MsgUpdateChainProofConfig) GetQuorumReq() int32 {
	if m != nil {
		return m.QuorumReq
	}
	return 0
}

func (m *MsgUpdateChainProofConfig) GetRewardAlloc() string {
	if m != nil {
		return m.RewardAlloc
	}
	return ""
}

func (m *MsgUpdateChainProofConfig) GetMinStakeReq() string {
	if m != nil {
		return m.MinStakeReq
	}
	return ""
}

func (m *MsgUpdateChainProofConfig) GetMinSubmissionsReq() int32 {
	if m != nil {
		return m.MinSubmissionsReq
	}
	return 0
}

func (m *MsgUpdateChainProofConfig) GetSessionTimeSec() string {
	if m != nil {
		return m.SessionTimeSec
	}
	return ""
}

func (m *MsgUpdateChainProofConfig) GetLiveMode() bool {
	if m != nil {
		return m.LiveMode
	}
	return false
}

type MsgUpdateChainProofConfigResponse struct {
	ChainConfigIndex string `protobuf:"bytes,1,opt,name=chainConfigIndex,proto3" json:"chainConfigIndex,omitempty"`
}

func (m *MsgUpdateChainProofConfigResponse) Reset()         { *m = MsgUpdateChainProofConfigResponse{} }
func (m *MsgUpdateChainProofConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChainProofConfigResponse) ProtoMessage()    {}
func (*MsgUpdateChainProofConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{19}
}
func (m *MsgUpdateChainProofConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChainProofConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChainProofConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChainProofConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChainProofConfigResponse.Merge(m, src)
}
func (m *MsgUpdateChainProofConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChainProofConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChainProofConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChainProofConfigResponse proto.InternalMessageInfo

func (m *MsgUpdateChainProofConfigResponse) GetChainConfigIndex() string {
	if m != nil {
		return m.ChainConfigIndex
	}
	return ""
}

type MsgUpdateChainSyncConfig struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId         int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofType       string `protobuf:"bytes,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	SrcBlockTimeSec string `protobuf:"bytes,4,opt,name=srcBlockTimeSec,proto3" json:"srcBlockTimeSec,omitempty"`
	SnkBlockTimeSec string `protobuf:"bytes,5,opt,name=snkBlockTimeSec,proto3" json:"snkBlockTimeSec,omitempty"`
	SyncBlockLimit  uint64 `protobuf:"varint,6,opt,name=syncBlockLimit,proto3" json:"syncBlockLimit,omitempty"`
	SyncLagLimit    uint64 `protobuf:"varint,7,opt,name=syncLagLimit,proto3" json:"syncLagLimit,omitempty"`
	BridgeTxDayFreq int32  `protobuf:"varint,8,opt,name=bridgeTxDayFreq,proto3" json:"bridgeTxDayFreq,omitempty"`
}

func (m *MsgUpdateChainSyncConfig) Reset()         { *m = MsgUpdateChainSyncConfig{} }
func (m *MsgUpdateChainSyncConfig) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChainSyncConfig) ProtoMessage()    {}
func (*MsgUpdateChainSyncConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{20}
}
func (m *MsgUpdateChainSyncConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChainSyncConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChainSyncConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChainSyncConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChainSyncConfig.Merge(m, src)
}
func (m *MsgUpdateChainSyncConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChainSyncConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChainSyncConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChainSyncConfig proto.InternalMessageInfo

func (m *MsgUpdateChainSyncConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateChainSyncConfig) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgUpdateChainSyncConfig) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *MsgUpdateChainSyncConfig) GetSrcBlockTimeSec() string {
	if m != nil {
		return m.SrcBlockTimeSec
	}
	return ""
}

func (m *MsgUpdateChainSyncConfig) GetSnkBlockTimeSec() string {
	if m != nil {
		return m.SnkBlockTimeSec
	}
	return ""
}

func (m *MsgUpdateChainSyncConfig) GetSyncBlockLimit() uint64 {
	if m != nil {
		return m.SyncBlockLimit
	}
	return 0
}

func (m *MsgUpdateChainSyncConfig) GetSyncLagLimit() uint64 {
	if m != nil {
		return m.SyncLagLimit
	}
	return 0
}

func (m *MsgUpdateChainSyncConfig) GetBridgeTxDayFreq() int32 {
	if m != nil {
		return m.BridgeTxDayFreq
	}
	return 0
}

type MsgUpdateChainSyncConfigResponse struct {
	ChainConfigIndex string `protobuf:"bytes,1,opt,name=chainConfigIndex,proto3" json:"chainConfigIndex,omitempty"`
}

func (m *MsgUpdateChainSyncConfigResponse) Reset()         { *m = MsgUpdateChainSyncConfigResponse{} }
func (m *MsgUpdateChainSyncConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChainSyncConfigResponse) ProtoMessage()    {}
func (*MsgUpdateChainSyncConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{21}
}
func (m *MsgUpdateChainSyncConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChainSyncConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChainSyncConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChainSyncConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChainSyncConfigResponse.Merge(m, src)
}
func (m *MsgUpdateChainSyncConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChainSyncConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChainSyncConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChainSyncConfigResponse proto.InternalMessageInfo

func (m *MsgUpdateChainSyncConfigResponse) GetChainConfigIndex() string {
	if m != nil {
		return m.ChainConfigIndex
	}
	return ""
}

type MsgEnableProofValidator struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId     int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofType   string `protobuf:"bytes,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	ValidatorId int32  `protobuf:"varint,4,opt,name=validatorId,proto3" json:"validatorId,omitempty"`
}

func (m *MsgEnableProofValidator) Reset()         { *m = MsgEnableProofValidator{} }
func (m *MsgEnableProofValidator) String() string { return proto.CompactTextString(m) }
func (*MsgEnableProofValidator) ProtoMessage()    {}
func (*MsgEnableProofValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{22}
}
func (m *MsgEnableProofValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnableProofValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnableProofValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnableProofValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnableProofValidator.Merge(m, src)
}
func (m *MsgEnableProofValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnableProofValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnableProofValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnableProofValidator proto.InternalMessageInfo

func (m *MsgEnableProofValidator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgEnableProofValidator) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgEnableProofValidator) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *MsgEnableProofValidator) GetValidatorId() int32 {
	if m != nil {
		return m.ValidatorId
	}
	return 0
}

type MsgEnableProofValidatorResponse struct {
	ValidatorIndex   string `protobuf:"bytes,1,opt,name=validatorIndex,proto3" json:"validatorIndex,omitempty"`
	ValidatorEnabled bool   `protobuf:"varint,2,opt,name=validatorEnabled,proto3" json:"validatorEnabled,omitempty"`
}

func (m *MsgEnableProofValidatorResponse) Reset()         { *m = MsgEnableProofValidatorResponse{} }
func (m *MsgEnableProofValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEnableProofValidatorResponse) ProtoMessage()    {}
func (*MsgEnableProofValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{23}
}
func (m *MsgEnableProofValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnableProofValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnableProofValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnableProofValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnableProofValidatorResponse.Merge(m, src)
}
func (m *MsgEnableProofValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnableProofValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnableProofValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnableProofValidatorResponse proto.InternalMessageInfo

func (m *MsgEnableProofValidatorResponse) GetValidatorIndex() string {
	if m != nil {
		return m.ValidatorIndex
	}
	return ""
}

func (m *MsgEnableProofValidatorResponse) GetValidatorEnabled() bool {
	if m != nil {
		return m.ValidatorEnabled
	}
	return false
}

type MsgDisableProofValidator struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId     int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofType   string `protobuf:"bytes,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	ValidatorId int32  `protobuf:"varint,4,opt,name=validatorId,proto3" json:"validatorId,omitempty"`
}

func (m *MsgDisableProofValidator) Reset()         { *m = MsgDisableProofValidator{} }
func (m *MsgDisableProofValidator) String() string { return proto.CompactTextString(m) }
func (*MsgDisableProofValidator) ProtoMessage()    {}
func (*MsgDisableProofValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{24}
}
func (m *MsgDisableProofValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableProofValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableProofValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableProofValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableProofValidator.Merge(m, src)
}
func (m *MsgDisableProofValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableProofValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableProofValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableProofValidator proto.InternalMessageInfo

func (m *MsgDisableProofValidator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDisableProofValidator) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgDisableProofValidator) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *MsgDisableProofValidator) GetValidatorId() int32 {
	if m != nil {
		return m.ValidatorId
	}
	return 0
}

type MsgDisableProofValidatorResponse struct {
	ValidatorIndex    int32 `protobuf:"varint,1,opt,name=validatorIndex,proto3" json:"validatorIndex,omitempty"`
	ValidatorDisabled bool  `protobuf:"varint,2,opt,name=validatorDisabled,proto3" json:"validatorDisabled,omitempty"`
}

func (m *MsgDisableProofValidatorResponse) Reset()         { *m = MsgDisableProofValidatorResponse{} }
func (m *MsgDisableProofValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDisableProofValidatorResponse) ProtoMessage()    {}
func (*MsgDisableProofValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{25}
}
func (m *MsgDisableProofValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableProofValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableProofValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableProofValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableProofValidatorResponse.Merge(m, src)
}
func (m *MsgDisableProofValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableProofValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableProofValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableProofValidatorResponse proto.InternalMessageInfo

func (m *MsgDisableProofValidatorResponse) GetValidatorIndex() int32 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *MsgDisableProofValidatorResponse) GetValidatorDisabled() bool {
	if m != nil {
		return m.ValidatorDisabled
	}
	return false
}

type MsgAssignOperatorValidator struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId          int32  `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ProofType        string `protobuf:"bytes,3,opt,name=proofType,proto3" json:"proofType,omitempty"`
	ValidatorAddress string `protobuf:"bytes,4,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	OperatorAddress  string `protobuf:"bytes,5,opt,name=operatorAddress,proto3" json:"operatorAddress,omitempty"`
}

func (m *MsgAssignOperatorValidator) Reset()         { *m = MsgAssignOperatorValidator{} }
func (m *MsgAssignOperatorValidator) String() string { return proto.CompactTextString(m) }
func (*MsgAssignOperatorValidator) ProtoMessage()    {}
func (*MsgAssignOperatorValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{26}
}
func (m *MsgAssignOperatorValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignOperatorValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignOperatorValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignOperatorValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignOperatorValidator.Merge(m, src)
}
func (m *MsgAssignOperatorValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignOperatorValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignOperatorValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignOperatorValidator proto.InternalMessageInfo

func (m *MsgAssignOperatorValidator) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAssignOperatorValidator) GetChainId() int32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAssignOperatorValidator) GetProofType() string {
	if m != nil {
		return m.ProofType
	}
	return ""
}

func (m *MsgAssignOperatorValidator) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgAssignOperatorValidator) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

type MsgAssignOperatorValidatorResponse struct {
	ValidatorIndex int32 `protobuf:"varint,1,opt,name=validatorIndex,proto3" json:"validatorIndex,omitempty"`
	OperatorIndex  int32 `protobuf:"varint,2,opt,name=operatorIndex,proto3" json:"operatorIndex,omitempty"`
}

func (m *MsgAssignOperatorValidatorResponse) Reset()         { *m = MsgAssignOperatorValidatorResponse{} }
func (m *MsgAssignOperatorValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAssignOperatorValidatorResponse) ProtoMessage()    {}
func (*MsgAssignOperatorValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b19c85b485ebed, []int{27}
}
func (m *MsgAssignOperatorValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAssignOperatorValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAssignOperatorValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAssignOperatorValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAssignOperatorValidatorResponse.Merge(m, src)
}
func (m *MsgAssignOperatorValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAssignOperatorValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAssignOperatorValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAssignOperatorValidatorResponse proto.InternalMessageInfo

func (m *MsgAssignOperatorValidatorResponse) GetValidatorIndex() int32 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *MsgAssignOperatorValidatorResponse) GetOperatorIndex() int32 {
	if m != nil {
		return m.OperatorIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgCreateProof)(nil), "covalenthq.ewm.ewm.MsgCreateProof")
	proto.RegisterType((*MsgCreateProofResponse)(nil), "covalenthq.ewm.ewm.MsgCreateProofResponse")
	proto.RegisterType((*MsgAssignProofSequencer)(nil), "covalenthq.ewm.ewm.MsgAssignProofSequencer")
	proto.RegisterType((*MsgAssignProofSequencerResponse)(nil), "covalenthq.ewm.ewm.MsgAssignProofSequencerResponse")
	proto.RegisterType((*MsgAssignProofOperator)(nil), "covalenthq.ewm.ewm.MsgAssignProofOperator")
	proto.RegisterType((*MsgAssignProofOperatorResponse)(nil), "covalenthq.ewm.ewm.MsgAssignProofOperatorResponse")
	proto.RegisterType((*MsgAssignProofValidator)(nil), "covalenthq.ewm.ewm.MsgAssignProofValidator")
	proto.RegisterType((*MsgAssignProofValidatorResponse)(nil), "covalenthq.ewm.ewm.MsgAssignProofValidatorResponse")
	proto.RegisterType((*MsgInitChainRole)(nil), "covalenthq.ewm.ewm.MsgInitChainRole")
	proto.RegisterType((*MsgInitChainRoleResponse)(nil), "covalenthq.ewm.ewm.MsgInitChainRoleResponse")
	proto.RegisterType((*MsgInitChainConfig)(nil), "covalenthq.ewm.ewm.MsgInitChainConfig")
	proto.RegisterType((*MsgInitChainConfigResponse)(nil), "covalenthq.ewm.ewm.MsgInitChainConfigResponse")
	proto.RegisterType((*MsgRemoveProofOperator)(nil), "covalenthq.ewm.ewm.MsgRemoveProofOperator")
	proto.RegisterType((*MsgRemoveProofOperatorResponse)(nil), "covalenthq.ewm.ewm.MsgRemoveProofOperatorResponse")
	proto.RegisterType((*MsgRemoveProofSequencer)(nil), "covalenthq.ewm.ewm.MsgRemoveProofSequencer")
	proto.RegisterType((*MsgRemoveProofSequencerResponse)(nil), "covalenthq.ewm.ewm.MsgRemoveProofSequencerResponse")
	proto.RegisterType((*MsgRemoveProofValidator)(nil), "covalenthq.ewm.ewm.MsgRemoveProofValidator")
	proto.RegisterType((*MsgRemoveProofValidatorResponse)(nil), "covalenthq.ewm.ewm.MsgRemoveProofValidatorResponse")
	proto.RegisterType((*MsgUpdateChainProofConfig)(nil), "covalenthq.ewm.ewm.MsgUpdateChainProofConfig")
	proto.RegisterType((*MsgUpdateChainProofConfigResponse)(nil), "covalenthq.ewm.ewm.MsgUpdateChainProofConfigResponse")
	proto.RegisterType((*MsgUpdateChainSyncConfig)(nil), "covalenthq.ewm.ewm.MsgUpdateChainSyncConfig")
	proto.RegisterType((*MsgUpdateChainSyncConfigResponse)(nil), "covalenthq.ewm.ewm.MsgUpdateChainSyncConfigResponse")
	proto.RegisterType((*MsgEnableProofValidator)(nil), "covalenthq.ewm.ewm.MsgEnableProofValidator")
	proto.RegisterType((*MsgEnableProofValidatorResponse)(nil), "covalenthq.ewm.ewm.MsgEnableProofValidatorResponse")
	proto.RegisterType((*MsgDisableProofValidator)(nil), "covalenthq.ewm.ewm.MsgDisableProofValidator")
	proto.RegisterType((*MsgDisableProofValidatorResponse)(nil), "covalenthq.ewm.ewm.MsgDisableProofValidatorResponse")
	proto.RegisterType((*MsgAssignOperatorValidator)(nil), "covalenthq.ewm.ewm.MsgAssignOperatorValidator")
	proto.RegisterType((*MsgAssignOperatorValidatorResponse)(nil), "covalenthq.ewm.ewm.MsgAssignOperatorValidatorResponse")
}

func init() { proto.RegisterFile("ewm/tx.proto", fileDescriptor_f0b19c85b485ebed) }

var fileDescriptor_f0b19c85b485ebed = []byte{
	// 1163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xae, 0xdb, 0x26, 0x4d, 0xdf, 0xee, 0xb6, 0xd9, 0x00, 0xbb, 0xc6, 0x42, 0x21, 0x58, 0x68,
	0x15, 0x55, 0x25, 0x95, 0xb6, 0xcb, 0x0a, 0xf1, 0x25, 0xb5, 0x5d, 0x96, 0xad, 0xb4, 0x61, 0x91,
	0x5b, 0x38, 0x70, 0x73, 0xec, 0x59, 0xc7, 0x6a, 0xe2, 0x49, 0x3d, 0x4e, 0x48, 0x7e, 0x00, 0x12,
	0x12, 0x62, 0x05, 0x12, 0x12, 0xff, 0x64, 0xef, 0x48, 0x1c, 0x38, 0xee, 0x11, 0x71, 0x42, 0x2d,
	0x47, 0x7e, 0x04, 0xf2, 0xd8, 0x9e, 0x78, 0xec, 0x49, 0xfd, 0x21, 0x2a, 0x75, 0x4f, 0xad, 0x1f,
	0xbf, 0xef, 0xe3, 0xf7, 0x63, 0xe6, 0x99, 0x77, 0x02, 0x75, 0x03, 0x4f, 0x90, 0x83, 0xbc, 0x5d,
	0x6f, 0xda, 0x19, 0xb9, 0xd8, 0xc3, 0x0d, 0xc5, 0xc0, 0x13, 0x7d, 0x80, 0x1c, 0xaf, 0x7f, 0xd6,
	0x09, 0x5f, 0x46, 0x7f, 0xd5, 0x7f, 0x24, 0xd8, 0xec, 0x12, 0xeb, 0xd0, 0x45, 0xba, 0x87, 0xbe,
	0x74, 0x31, 0x7e, 0xd6, 0x90, 0x61, 0xcd, 0xf0, 0x1f, 0xb1, 0x2b, 0x4b, 0x2d, 0xa9, 0xbd, 0xae,
	0x45, 0x8f, 0xf4, 0x4d, 0x5f, 0xb7, 0x9d, 0x23, 0x53, 0x5e, 0x6e, 0x49, 0xed, 0x8a, 0x16, 0x3d,
	0x36, 0xde, 0x82, 0xf5, 0x91, 0xef, 0x7c, 0x32, 0x1b, 0x21, 0x79, 0x85, 0x7a, 0xcd, 0x81, 0x46,
	0x0b, 0x36, 0x7a, 0x03, 0x6c, 0x9c, 0x3e, 0x46, 0xb6, 0xd5, 0xf7, 0xe4, 0xd5, 0x96, 0xd4, 0x5e,
	0xd5, 0xe2, 0x90, 0xef, 0x1f, 0x3c, 0xea, 0xa4, 0x2f, 0x57, 0x02, 0x7f, 0x06, 0x30, 0x76, 0xfa,
	0xb6, 0x1a, 0x63, 0xa7, 0x6f, 0x55, 0xb8, 0x41, 0x3c, 0xec, 0xa2, 0x7d, 0xd3, 0x74, 0x11, 0x21,
	0xf2, 0x1a, 0x35, 0xe0, 0x30, 0xf5, 0x03, 0xb8, 0xcd, 0x67, 0xa9, 0x21, 0x32, 0xc2, 0x0e, 0x41,
	0x8d, 0x26, 0x00, 0xa5, 0x3a, 0x72, 0x4c, 0x34, 0x0d, 0x13, 0x8e, 0x21, 0xea, 0xaf, 0x12, 0xdc,
	0xe9, 0x12, 0x6b, 0x9f, 0x10, 0xdb, 0x72, 0xa8, 0xeb, 0x31, 0x3a, 0x1b, 0x23, 0xc7, 0x40, 0x6e,
	0xa9, 0x4a, 0x6d, 0x43, 0x9d, 0x44, 0x04, 0x51, 0xc4, 0x41, 0xc1, 0x52, 0x38, 0x5f, 0xd5, 0xd5,
	0x44, 0x55, 0xd5, 0x23, 0x78, 0x7b, 0x41, 0x60, 0x2c, 0xb9, 0xbb, 0xb0, 0xc9, 0x48, 0xe3, 0x09,
	0x26, 0x50, 0xf5, 0x17, 0x89, 0xd6, 0x27, 0xc6, 0xf5, 0x74, 0x84, 0x5c, 0x96, 0x49, 0xd1, 0x1c,
	0xdb, 0xb0, 0x85, 0x43, 0x7f, 0x3e, 0xc5, 0x24, 0x9c, 0x91, 0xe1, 0x23, 0x68, 0x8a, 0xa3, 0x62,
	0x09, 0xbe, 0x0b, 0x37, 0x23, 0xca, 0x78, 0x7e, 0x3c, 0x28, 0xe8, 0xe1, 0xd7, 0xfa, 0xc0, 0x36,
	0x4b, 0xe7, 0xb7, 0x0d, 0xf5, 0x49, 0x44, 0x90, 0xe8, 0x61, 0x12, 0x2f, 0xda, 0x43, 0x16, 0x58,
	0xbc, 0x87, 0x8c, 0x94, 0xeb, 0x21, 0x8f, 0xaa, 0x7f, 0x49, 0x50, 0xef, 0x12, 0xeb, 0xc8, 0xb1,
	0xbd, 0x43, 0x3f, 0x4e, 0x0d, 0x0f, 0x50, 0xa9, 0xec, 0xee, 0xc2, 0xe6, 0x88, 0x5b, 0x4e, 0x61,
	0x6e, 0x09, 0xd4, 0xaf, 0xfd, 0x28, 0xde, 0x94, 0x30, 0x3b, 0x1e, 0x64, 0x6c, 0x2c, 0xb1, 0x70,
	0x7b, 0x27, 0x50, 0xbe, 0x4e, 0xd5, 0x64, 0x9d, 0x0e, 0x40, 0x4e, 0xe6, 0x16, 0x2f, 0x90, 0x11,
	0x81, 0x5c, 0x81, 0x78, 0x54, 0x7d, 0xb1, 0x02, 0x8d, 0x38, 0xc9, 0x21, 0x76, 0x9e, 0xd9, 0xd6,
	0x15, 0xc8, 0x5d, 0x1b, 0xb6, 0x88, 0x6b, 0x1c, 0xf8, 0xf2, 0x75, 0x62, 0x0f, 0xd1, 0x31, 0x32,
	0xc2, 0xd2, 0x24, 0x61, 0x6a, 0xe9, 0x9c, 0x72, 0x96, 0x95, 0xd0, 0x92, 0x87, 0xfd, 0x2f, 0x9e,
	0x8d, 0xb1, 0x3b, 0x1e, 0x6a, 0xe8, 0x8c, 0x96, 0xa7, 0xa2, 0xcd, 0x01, 0x5f, 0x60, 0x5d, 0xf4,
	0xad, 0xee, 0x9a, 0xfb, 0x83, 0x01, 0x36, 0x42, 0x05, 0x8c, 0x43, 0xbe, 0xc5, 0xd0, 0x76, 0x8e,
	0x3d, 0xfd, 0x14, 0xf9, 0x0c, 0xb5, 0xc0, 0x22, 0x06, 0x35, 0x76, 0xe0, 0x96, 0xff, 0x38, 0xee,
	0x0d, 0x6d, 0x42, 0x6c, 0xec, 0x10, 0xdf, 0x6e, 0x9d, 0x7e, 0x29, 0xfd, 0x22, 0x50, 0x16, 0xfa,
	0x18, 0x05, 0x0e, 0x91, 0xb2, 0xc4, 0xd1, 0x86, 0x02, 0xb5, 0x81, 0x3d, 0x41, 0x5d, 0x6c, 0x22,
	0x79, 0xa3, 0x25, 0xb5, 0x6b, 0x1a, 0x7b, 0xa6, 0x1c, 0x33, 0x27, 0xa8, 0xc8, 0x13, 0x7b, 0x68,
	0x7b, 0xf2, 0x0d, 0x7a, 0x32, 0x24, 0x50, 0xf5, 0x31, 0x28, 0xe9, 0xbe, 0xb1, 0xf6, 0x6f, 0x43,
	0xdd, 0x98, 0xc3, 0xf1, 0x05, 0x90, 0xc2, 0x23, 0x9d, 0xd3, 0xd0, 0x10, 0x4f, 0xd0, 0x75, 0xd3,
	0x39, 0x41, 0x54, 0xe5, 0x74, 0x2e, 0x46, 0x74, 0xbd, 0xce, 0x2a, 0x51, 0x60, 0x85, 0xcf, 0xaa,
	0x74, 0x92, 0xd7, 0x4b, 0xcc, 0x45, 0x81, 0x15, 0x16, 0xf3, 0xdf, 0x96, 0xe1, 0xcd, 0x2e, 0xb1,
	0xbe, 0x1a, 0x99, 0xba, 0x87, 0xe8, 0xaa, 0xa7, 0x84, 0x57, 0x26, 0x59, 0x9c, 0xbc, 0xac, 0x66,
	0xc8, 0x4b, 0x25, 0x53, 0x5e, 0xaa, 0x39, 0xe5, 0x65, 0x2d, 0xbf, 0xbc, 0xd4, 0x32, 0xe5, 0x65,
	0x9d, 0x97, 0x17, 0xf5, 0x29, 0xbc, 0xb3, 0xb0, 0x84, 0xa5, 0xd4, 0xe3, 0xc5, 0x32, 0x3d, 0x85,
	0x62, 0x8c, 0xc7, 0x33, 0xc7, 0x78, 0xa5, 0x8e, 0x91, 0xb4, 0xe4, 0x56, 0x45, 0x92, 0x4b, 0x67,
	0xea, 0x99, 0x63, 0x3c, 0xd1, 0xad, 0xc0, 0x6a, 0x8d, 0x5a, 0x71, 0x98, 0xff, 0xd5, 0x9e, 0x6b,
	0x9b, 0x16, 0x3a, 0x99, 0x3e, 0xd4, 0x67, 0x8f, 0xdc, 0xf0, 0x58, 0xa9, 0x68, 0x49, 0x58, 0xfd,
	0x02, 0x5a, 0x8b, 0xea, 0x56, 0xaa, 0x11, 0x3f, 0x06, 0x12, 0xf0, 0x99, 0xa3, 0xf7, 0x06, 0xff,
	0x87, 0x04, 0x64, 0xde, 0x5e, 0xe6, 0xbb, 0xd3, 0x0c, 0x77, 0x47, 0x1c, 0x52, 0xc7, 0x74, 0xe3,
	0x8b, 0xc2, 0x29, 0xba, 0xf1, 0x39, 0x35, 0x0a, 0x08, 0x83, 0x68, 0x6b, 0x5a, 0x0a, 0x57, 0x9f,
	0x4b, 0x74, 0x3d, 0x3e, 0xb4, 0xc9, 0x35, 0xa9, 0xc3, 0x94, 0xf6, 0x59, 0x18, 0x4f, 0x46, 0x21,
	0x2a, 0xa9, 0x42, 0xec, 0xc0, 0x2d, 0x86, 0x84, 0x8c, 0x51, 0x25, 0xd2, 0x2f, 0xd4, 0xdf, 0x25,
	0x3a, 0x23, 0x04, 0x83, 0x74, 0x74, 0x7a, 0x5e, 0x65, 0x31, 0x44, 0xa7, 0xc6, 0xea, 0x82, 0x53,
	0x43, 0x30, 0x26, 0x54, 0x84, 0x63, 0x82, 0xea, 0x82, 0xba, 0x38, 0x8b, 0xc2, 0x25, 0x4c, 0x0d,
	0x0d, 0x41, 0x86, 0x3c, 0x78, 0xef, 0xdf, 0x4d, 0x58, 0xe9, 0x12, 0xab, 0x31, 0x84, 0x8d, 0xf8,
	0xaf, 0x00, 0xdb, 0x9d, 0xc5, 0xbf, 0x1a, 0x74, 0xf8, 0xbb, 0xb4, 0x72, 0x2f, 0xbf, 0x2d, 0x4b,
	0xe2, 0x3b, 0x09, 0x5e, 0x13, 0xdd, 0x37, 0xb3, 0xb8, 0x04, 0x3e, 0xca, 0x87, 0xc5, 0x7d, 0x58,
	0x1c, 0xdf, 0x4b, 0xf0, 0xba, 0xf0, 0x62, 0xb8, 0x97, 0x9f, 0x94, 0x39, 0x29, 0x1f, 0x95, 0x70,
	0x5a, 0x14, 0xca, 0x7c, 0x76, 0x2b, 0x10, 0x0a, 0x73, 0x2a, 0x12, 0x4a, 0x7a, 0x18, 0x23, 0x70,
	0x93, 0xbf, 0x48, 0xee, 0x64, 0xb0, 0x71, 0xd6, 0xca, 0xfd, 0x22, 0xd6, 0xec, 0xa3, 0x33, 0xd8,
	0x4a, 0x5e, 0xce, 0x3a, 0x79, 0x89, 0x02, 0x7b, 0xe5, 0x41, 0x31, 0x7b, 0x6e, 0x35, 0x8a, 0x6e,
	0x05, 0x59, 0xab, 0x51, 0xe0, 0x93, 0xb9, 0x1a, 0x2f, 0x9b, 0xf3, 0xfd, 0x25, 0x20, 0x1c, 0xdf,
	0xf7, 0xf2, 0x93, 0xe6, 0x5f, 0x02, 0x97, 0xce, 0xe3, 0x89, 0x50, 0xf2, 0x6f, 0x0c, 0x91, 0x53,
	0x91, 0x50, 0xd2, 0x1b, 0xe3, 0xb9, 0x04, 0xb7, 0x17, 0x8c, 0xc2, 0xef, 0x67, 0xf0, 0x8a, 0xdd,
	0x94, 0x4f, 0x4a, 0xb9, 0xb1, 0x80, 0x7e, 0x90, 0xe0, 0x0d, 0xf1, 0x18, 0x78, 0x3f, 0x3f, 0xf1,
	0xdc, 0x4b, 0xf9, 0xb8, 0x8c, 0x17, 0xd7, 0x29, 0xe1, 0x2c, 0x94, 0xd5, 0x29, 0x91, 0x53, 0x66,
	0xa7, 0x2e, 0x1d, 0x73, 0xfc, 0xc2, 0x88, 0xe7, 0x91, 0xac, 0xc2, 0x08, 0xbd, 0x32, 0x0b, 0x73,
	0xf9, 0xac, 0xf1, 0xb3, 0x04, 0x77, 0x16, 0x8d, 0x04, 0x0f, 0x72, 0xc9, 0x63, 0xca, 0x4f, 0xf9,
	0xb4, 0x9c, 0x5f, 0x14, 0xd3, 0xc1, 0xe7, 0x7f, 0x9c, 0x37, 0xa5, 0x97, 0xe7, 0x4d, 0xe9, 0xef,
	0xf3, 0xa6, 0xf4, 0xd3, 0x45, 0x73, 0xe9, 0xe5, 0x45, 0x73, 0xe9, 0xcf, 0x8b, 0xe6, 0xd2, 0x37,
	0xef, 0x59, 0xb6, 0xd7, 0x1f, 0xf7, 0x3a, 0x06, 0x1e, 0xee, 0xce, 0xbf, 0xb1, 0x1b, 0xfd, 0x9c,
	0x3f, 0x65, 0xff, 0x79, 0xb3, 0x11, 0x22, 0xbd, 0x2a, 0xfd, 0x71, 0x7f, 0xef, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0x6b, 0x49, 0x8a, 0xf0, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateProof(ctx context.Context, in *MsgCreateProof, opts ...grpc.CallOption) (*MsgCreateProofResponse, error)
	AssignProofOperator(ctx context.Context, in *MsgAssignProofOperator, opts ...grpc.CallOption) (*MsgAssignProofOperatorResponse, error)
	AssignProofValidator(ctx context.Context, in *MsgAssignProofValidator, opts ...grpc.CallOption) (*MsgAssignProofValidatorResponse, error)
	AssignProofSequencer(ctx context.Context, in *MsgAssignProofSequencer, opts ...grpc.CallOption) (*MsgAssignProofSequencerResponse, error)
	InitChainRole(ctx context.Context, in *MsgInitChainRole, opts ...grpc.CallOption) (*MsgInitChainRoleResponse, error)
	InitChainConfig(ctx context.Context, in *MsgInitChainConfig, opts ...grpc.CallOption) (*MsgInitChainConfigResponse, error)
	RemoveProofOperator(ctx context.Context, in *MsgRemoveProofOperator, opts ...grpc.CallOption) (*MsgRemoveProofOperatorResponse, error)
	RemoveProofSequencer(ctx context.Context, in *MsgRemoveProofSequencer, opts ...grpc.CallOption) (*MsgRemoveProofSequencerResponse, error)
	RemoveProofValidator(ctx context.Context, in *MsgRemoveProofValidator, opts ...grpc.CallOption) (*MsgRemoveProofValidatorResponse, error)
	UpdateChainProofConfig(ctx context.Context, in *MsgUpdateChainProofConfig, opts ...grpc.CallOption) (*MsgUpdateChainProofConfigResponse, error)
	UpdateChainSyncConfig(ctx context.Context, in *MsgUpdateChainSyncConfig, opts ...grpc.CallOption) (*MsgUpdateChainSyncConfigResponse, error)
	EnableProofValidator(ctx context.Context, in *MsgEnableProofValidator, opts ...grpc.CallOption) (*MsgEnableProofValidatorResponse, error)
	DisableProofValidator(ctx context.Context, in *MsgDisableProofValidator, opts ...grpc.CallOption) (*MsgDisableProofValidatorResponse, error)
	AssignOperatorValidator(ctx context.Context, in *MsgAssignOperatorValidator, opts ...grpc.CallOption) (*MsgAssignOperatorValidatorResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateProof(ctx context.Context, in *MsgCreateProof, opts ...grpc.CallOption) (*MsgCreateProofResponse, error) {
	out := new(MsgCreateProofResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/CreateProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AssignProofOperator(ctx context.Context, in *MsgAssignProofOperator, opts ...grpc.CallOption) (*MsgAssignProofOperatorResponse, error) {
	out := new(MsgAssignProofOperatorResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/AssignProofOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AssignProofValidator(ctx context.Context, in *MsgAssignProofValidator, opts ...grpc.CallOption) (*MsgAssignProofValidatorResponse, error) {
	out := new(MsgAssignProofValidatorResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/AssignProofValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AssignProofSequencer(ctx context.Context, in *MsgAssignProofSequencer, opts ...grpc.CallOption) (*MsgAssignProofSequencerResponse, error) {
	out := new(MsgAssignProofSequencerResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/AssignProofSequencer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitChainRole(ctx context.Context, in *MsgInitChainRole, opts ...grpc.CallOption) (*MsgInitChainRoleResponse, error) {
	out := new(MsgInitChainRoleResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/InitChainRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitChainConfig(ctx context.Context, in *MsgInitChainConfig, opts ...grpc.CallOption) (*MsgInitChainConfigResponse, error) {
	out := new(MsgInitChainConfigResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/InitChainConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveProofOperator(ctx context.Context, in *MsgRemoveProofOperator, opts ...grpc.CallOption) (*MsgRemoveProofOperatorResponse, error) {
	out := new(MsgRemoveProofOperatorResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/RemoveProofOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveProofSequencer(ctx context.Context, in *MsgRemoveProofSequencer, opts ...grpc.CallOption) (*MsgRemoveProofSequencerResponse, error) {
	out := new(MsgRemoveProofSequencerResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/RemoveProofSequencer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveProofValidator(ctx context.Context, in *MsgRemoveProofValidator, opts ...grpc.CallOption) (*MsgRemoveProofValidatorResponse, error) {
	out := new(MsgRemoveProofValidatorResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/RemoveProofValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateChainProofConfig(ctx context.Context, in *MsgUpdateChainProofConfig, opts ...grpc.CallOption) (*MsgUpdateChainProofConfigResponse, error) {
	out := new(MsgUpdateChainProofConfigResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/UpdateChainProofConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateChainSyncConfig(ctx context.Context, in *MsgUpdateChainSyncConfig, opts ...grpc.CallOption) (*MsgUpdateChainSyncConfigResponse, error) {
	out := new(MsgUpdateChainSyncConfigResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/UpdateChainSyncConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnableProofValidator(ctx context.Context, in *MsgEnableProofValidator, opts ...grpc.CallOption) (*MsgEnableProofValidatorResponse, error) {
	out := new(MsgEnableProofValidatorResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/EnableProofValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisableProofValidator(ctx context.Context, in *MsgDisableProofValidator, opts ...grpc.CallOption) (*MsgDisableProofValidatorResponse, error) {
	out := new(MsgDisableProofValidatorResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/DisableProofValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AssignOperatorValidator(ctx context.Context, in *MsgAssignOperatorValidator, opts ...grpc.CallOption) (*MsgAssignOperatorValidatorResponse, error) {
	out := new(MsgAssignOperatorValidatorResponse)
	err := c.cc.Invoke(ctx, "/covalenthq.ewm.ewm.Msg/AssignOperatorValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateProof(context.Context, *MsgCreateProof) (*MsgCreateProofResponse, error)
	AssignProofOperator(context.Context, *MsgAssignProofOperator) (*MsgAssignProofOperatorResponse, error)
	AssignProofValidator(context.Context, *MsgAssignProofValidator) (*MsgAssignProofValidatorResponse, error)
	AssignProofSequencer(context.Context, *MsgAssignProofSequencer) (*MsgAssignProofSequencerResponse, error)
	InitChainRole(context.Context, *MsgInitChainRole) (*MsgInitChainRoleResponse, error)
	InitChainConfig(context.Context, *MsgInitChainConfig) (*MsgInitChainConfigResponse, error)
	RemoveProofOperator(context.Context, *MsgRemoveProofOperator) (*MsgRemoveProofOperatorResponse, error)
	RemoveProofSequencer(context.Context, *MsgRemoveProofSequencer) (*MsgRemoveProofSequencerResponse, error)
	RemoveProofValidator(context.Context, *MsgRemoveProofValidator) (*MsgRemoveProofValidatorResponse, error)
	UpdateChainProofConfig(context.Context, *MsgUpdateChainProofConfig) (*MsgUpdateChainProofConfigResponse, error)
	UpdateChainSyncConfig(context.Context, *MsgUpdateChainSyncConfig) (*MsgUpdateChainSyncConfigResponse, error)
	EnableProofValidator(context.Context, *MsgEnableProofValidator) (*MsgEnableProofValidatorResponse, error)
	DisableProofValidator(context.Context, *MsgDisableProofValidator) (*MsgDisableProofValidatorResponse, error)
	AssignOperatorValidator(context.Context, *MsgAssignOperatorValidator) (*MsgAssignOperatorValidatorResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateProof(ctx context.Context, req *MsgCreateProof) (*MsgCreateProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProof not implemented")
}
func (*UnimplementedMsgServer) AssignProofOperator(ctx context.Context, req *MsgAssignProofOperator) (*MsgAssignProofOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignProofOperator not implemented")
}
func (*UnimplementedMsgServer) AssignProofValidator(ctx context.Context, req *MsgAssignProofValidator) (*MsgAssignProofValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignProofValidator not implemented")
}
func (*UnimplementedMsgServer) AssignProofSequencer(ctx context.Context, req *MsgAssignProofSequencer) (*MsgAssignProofSequencerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignProofSequencer not implemented")
}
func (*UnimplementedMsgServer) InitChainRole(ctx context.Context, req *MsgInitChainRole) (*MsgInitChainRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitChainRole not implemented")
}
func (*UnimplementedMsgServer) InitChainConfig(ctx context.Context, req *MsgInitChainConfig) (*MsgInitChainConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitChainConfig not implemented")
}
func (*UnimplementedMsgServer) RemoveProofOperator(ctx context.Context, req *MsgRemoveProofOperator) (*MsgRemoveProofOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProofOperator not implemented")
}
func (*UnimplementedMsgServer) RemoveProofSequencer(ctx context.Context, req *MsgRemoveProofSequencer) (*MsgRemoveProofSequencerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProofSequencer not implemented")
}
func (*UnimplementedMsgServer) RemoveProofValidator(ctx context.Context, req *MsgRemoveProofValidator) (*MsgRemoveProofValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProofValidator not implemented")
}
func (*UnimplementedMsgServer) UpdateChainProofConfig(ctx context.Context, req *MsgUpdateChainProofConfig) (*MsgUpdateChainProofConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChainProofConfig not implemented")
}
func (*UnimplementedMsgServer) UpdateChainSyncConfig(ctx context.Context, req *MsgUpdateChainSyncConfig) (*MsgUpdateChainSyncConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChainSyncConfig not implemented")
}
func (*UnimplementedMsgServer) EnableProofValidator(ctx context.Context, req *MsgEnableProofValidator) (*MsgEnableProofValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProofValidator not implemented")
}
func (*UnimplementedMsgServer) DisableProofValidator(ctx context.Context, req *MsgDisableProofValidator) (*MsgDisableProofValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProofValidator not implemented")
}
func (*UnimplementedMsgServer) AssignOperatorValidator(ctx context.Context, req *MsgAssignOperatorValidator) (*MsgAssignOperatorValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignOperatorValidator not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/CreateProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateProof(ctx, req.(*MsgCreateProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AssignProofOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAssignProofOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AssignProofOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/AssignProofOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AssignProofOperator(ctx, req.(*MsgAssignProofOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AssignProofValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAssignProofValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AssignProofValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/AssignProofValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AssignProofValidator(ctx, req.(*MsgAssignProofValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AssignProofSequencer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAssignProofSequencer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AssignProofSequencer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/AssignProofSequencer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AssignProofSequencer(ctx, req.(*MsgAssignProofSequencer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitChainRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitChainRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitChainRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/InitChainRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitChainRole(ctx, req.(*MsgInitChainRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitChainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitChainConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitChainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/InitChainConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitChainConfig(ctx, req.(*MsgInitChainConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveProofOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveProofOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveProofOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/RemoveProofOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveProofOperator(ctx, req.(*MsgRemoveProofOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveProofSequencer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveProofSequencer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveProofSequencer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/RemoveProofSequencer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveProofSequencer(ctx, req.(*MsgRemoveProofSequencer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveProofValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveProofValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveProofValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/RemoveProofValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveProofValidator(ctx, req.(*MsgRemoveProofValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateChainProofConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateChainProofConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateChainProofConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/UpdateChainProofConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateChainProofConfig(ctx, req.(*MsgUpdateChainProofConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateChainSyncConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateChainSyncConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateChainSyncConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/UpdateChainSyncConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateChainSyncConfig(ctx, req.(*MsgUpdateChainSyncConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnableProofValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnableProofValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnableProofValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/EnableProofValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnableProofValidator(ctx, req.(*MsgEnableProofValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisableProofValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableProofValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableProofValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/DisableProofValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableProofValidator(ctx, req.(*MsgDisableProofValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AssignOperatorValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAssignOperatorValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AssignOperatorValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/covalenthq.ewm.ewm.Msg/AssignOperatorValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AssignOperatorValidator(ctx, req.(*MsgAssignOperatorValidator))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "covalenthq.ewm.ewm.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProof",
			Handler:    _Msg_CreateProof_Handler,
		},
		{
			MethodName: "AssignProofOperator",
			Handler:    _Msg_AssignProofOperator_Handler,
		},
		{
			MethodName: "AssignProofValidator",
			Handler:    _Msg_AssignProofValidator_Handler,
		},
		{
			MethodName: "AssignProofSequencer",
			Handler:    _Msg_AssignProofSequencer_Handler,
		},
		{
			MethodName: "InitChainRole",
			Handler:    _Msg_InitChainRole_Handler,
		},
		{
			MethodName: "InitChainConfig",
			Handler:    _Msg_InitChainConfig_Handler,
		},
		{
			MethodName: "RemoveProofOperator",
			Handler:    _Msg_RemoveProofOperator_Handler,
		},
		{
			MethodName: "RemoveProofSequencer",
			Handler:    _Msg_RemoveProofSequencer_Handler,
		},
		{
			MethodName: "RemoveProofValidator",
			Handler:    _Msg_RemoveProofValidator_Handler,
		},
		{
			MethodName: "UpdateChainProofConfig",
			Handler:    _Msg_UpdateChainProofConfig_Handler,
		},
		{
			MethodName: "UpdateChainSyncConfig",
			Handler:    _Msg_UpdateChainSyncConfig_Handler,
		},
		{
			MethodName: "EnableProofValidator",
			Handler:    _Msg_EnableProofValidator_Handler,
		},
		{
			MethodName: "DisableProofValidator",
			Handler:    _Msg_DisableProofValidator_Handler,
		},
		{
			MethodName: "AssignOperatorValidator",
			Handler:    _Msg_AssignOperatorValidator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ewm/tx.proto",
}

func (m *MsgCreateProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StoreAddress) > 0 {
		i -= len(m.StoreAddress)
		copy(dAtA[i:], m.StoreAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StoreAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProofHash) > 0 {
		i -= len(m.ProofHash)
		copy(dAtA[i:], m.ProofHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofIndex) > 0 {
		i -= len(m.ProofIndex)
		copy(dAtA[i:], m.ProofIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignProofSequencer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignProofSequencer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignProofSequencer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SequencerAddress) > 0 {
		i -= len(m.SequencerAddress)
		copy(dAtA[i:], m.SequencerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SequencerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignProofSequencerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignProofSequencerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignProofSequencerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SequencerIndex) > 0 {
		i -= len(m.SequencerIndex)
		copy(dAtA[i:], m.SequencerIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SequencerIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignProofOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignProofOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignProofOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignProofOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignProofOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignProofOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorIndex) > 0 {
		i -= len(m.OperatorIndex)
		copy(dAtA[i:], m.OperatorIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignProofValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignProofValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignProofValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignProofValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignProofValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignProofValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorIndex) > 0 {
		i -= len(m.ValidatorIndex)
		copy(dAtA[i:], m.ValidatorIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitChainRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitChainRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitChainRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProofValidator) > 0 {
		i -= len(m.ProofValidator)
		copy(dAtA[i:], m.ProofValidator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofValidator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProofOperator) > 0 {
		i -= len(m.ProofOperator)
		copy(dAtA[i:], m.ProofOperator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofOperator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofSequencer) > 0 {
		i -= len(m.ProofSequencer)
		copy(dAtA[i:], m.ProofSequencer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofSequencer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitChainRoleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitChainRoleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitChainRoleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainRoleIndex) > 0 {
		i -= len(m.ChainRoleIndex)
		copy(dAtA[i:], m.ChainRoleIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainRoleIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SyncBlockLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SyncBlockLimit))
		i--
		dAtA[i] = 0x60
	}
	if m.LiveMode {
		i--
		if m.LiveMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.SessionTimeSec) > 0 {
		i -= len(m.SessionTimeSec)
		copy(dAtA[i:], m.SessionTimeSec)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionTimeSec)))
		i--
		dAtA[i] = 0x52
	}
	if m.MinSubmissionsReq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinSubmissionsReq))
		i--
		dAtA[i] = 0x48
	}
	if len(m.MinStakeReq) > 0 {
		i -= len(m.MinStakeReq)
		copy(dAtA[i:], m.MinStakeReq)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinStakeReq)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RewardAlloc) > 0 {
		i -= len(m.RewardAlloc)
		copy(dAtA[i:], m.RewardAlloc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardAlloc)))
		i--
		dAtA[i] = 0x3a
	}
	if m.QuorumReq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.QuorumReq))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SnkBlockTimeSec) > 0 {
		i -= len(m.SnkBlockTimeSec)
		copy(dAtA[i:], m.SnkBlockTimeSec)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SnkBlockTimeSec)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SrcBlockTimeSec) > 0 {
		i -= len(m.SrcBlockTimeSec)
		copy(dAtA[i:], m.SrcBlockTimeSec)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcBlockTimeSec)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitChainConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitChainConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitChainConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainConfigIndex) > 0 {
		i -= len(m.ChainConfigIndex)
		copy(dAtA[i:], m.ChainConfigIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainConfigIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveProofOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveProofOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveProofOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveProofOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveProofOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveProofOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorIndex) > 0 {
		i -= len(m.OperatorIndex)
		copy(dAtA[i:], m.OperatorIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveProofSequencer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveProofSequencer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveProofSequencer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SequencerAddress) > 0 {
		i -= len(m.SequencerAddress)
		copy(dAtA[i:], m.SequencerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SequencerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveProofSequencerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveProofSequencerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveProofSequencerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SequencerIndex) > 0 {
		i -= len(m.SequencerIndex)
		copy(dAtA[i:], m.SequencerIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SequencerIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveProofValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveProofValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveProofValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveProofValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveProofValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveProofValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorIndex) > 0 {
		i -= len(m.ValidatorIndex)
		copy(dAtA[i:], m.ValidatorIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChainProofConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChainProofConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChainProofConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LiveMode {
		i--
		if m.LiveMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.SessionTimeSec) > 0 {
		i -= len(m.SessionTimeSec)
		copy(dAtA[i:], m.SessionTimeSec)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionTimeSec)))
		i--
		dAtA[i] = 0x42
	}
	if m.MinSubmissionsReq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinSubmissionsReq))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MinStakeReq) > 0 {
		i -= len(m.MinStakeReq)
		copy(dAtA[i:], m.MinStakeReq)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinStakeReq)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RewardAlloc) > 0 {
		i -= len(m.RewardAlloc)
		copy(dAtA[i:], m.RewardAlloc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardAlloc)))
		i--
		dAtA[i] = 0x2a
	}
	if m.QuorumReq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.QuorumReq))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChainProofConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChainProofConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChainProofConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainConfigIndex) > 0 {
		i -= len(m.ChainConfigIndex)
		copy(dAtA[i:], m.ChainConfigIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainConfigIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChainSyncConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChainSyncConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChainSyncConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BridgeTxDayFreq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeTxDayFreq))
		i--
		dAtA[i] = 0x40
	}
	if m.SyncLagLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SyncLagLimit))
		i--
		dAtA[i] = 0x38
	}
	if m.SyncBlockLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SyncBlockLimit))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SnkBlockTimeSec) > 0 {
		i -= len(m.SnkBlockTimeSec)
		copy(dAtA[i:], m.SnkBlockTimeSec)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SnkBlockTimeSec)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SrcBlockTimeSec) > 0 {
		i -= len(m.SrcBlockTimeSec)
		copy(dAtA[i:], m.SrcBlockTimeSec)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcBlockTimeSec)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChainSyncConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChainSyncConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChainSyncConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainConfigIndex) > 0 {
		i -= len(m.ChainConfigIndex)
		copy(dAtA[i:], m.ChainConfigIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainConfigIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEnableProofValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnableProofValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnableProofValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ValidatorId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEnableProofValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnableProofValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnableProofValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorEnabled {
		i--
		if m.ValidatorEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorIndex) > 0 {
		i -= len(m.ValidatorIndex)
		copy(dAtA[i:], m.ValidatorIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDisableProofValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableProofValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableProofValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ValidatorId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDisableProofValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableProofValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableProofValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorDisabled {
		i--
		if m.ValidatorDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ValidatorIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ValidatorIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignOperatorValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignOperatorValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignOperatorValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAssignOperatorValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAssignOperatorValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAssignOperatorValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OperatorIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.ValidatorIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ValidatorIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StoreAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAssignProofSequencer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.SequencerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAssignProofSequencerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SequencerIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAssignProofOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAssignProofOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAssignProofValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAssignProofValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInitChainRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.ProofSequencer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofOperator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofValidator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInitChainRoleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainRoleIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInitChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcBlockTimeSec)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SnkBlockTimeSec)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.QuorumReq != 0 {
		n += 1 + sovTx(uint64(m.QuorumReq))
	}
	l = len(m.RewardAlloc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinStakeReq)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MinSubmissionsReq != 0 {
		n += 1 + sovTx(uint64(m.MinSubmissionsReq))
	}
	l = len(m.SessionTimeSec)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LiveMode {
		n += 2
	}
	if m.SyncBlockLimit != 0 {
		n += 1 + sovTx(uint64(m.SyncBlockLimit))
	}
	return n
}

func (m *MsgInitChainConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainConfigIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveProofOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveProofOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveProofSequencer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.SequencerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveProofSequencerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SequencerIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveProofValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveProofValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateChainProofConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.QuorumReq != 0 {
		n += 1 + sovTx(uint64(m.QuorumReq))
	}
	l = len(m.RewardAlloc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinStakeReq)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MinSubmissionsReq != 0 {
		n += 1 + sovTx(uint64(m.MinSubmissionsReq))
	}
	l = len(m.SessionTimeSec)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LiveMode {
		n += 2
	}
	return n
}

func (m *MsgUpdateChainProofConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainConfigIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateChainSyncConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcBlockTimeSec)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SnkBlockTimeSec)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SyncBlockLimit != 0 {
		n += 1 + sovTx(uint64(m.SyncBlockLimit))
	}
	if m.SyncLagLimit != 0 {
		n += 1 + sovTx(uint64(m.SyncLagLimit))
	}
	if m.BridgeTxDayFreq != 0 {
		n += 1 + sovTx(uint64(m.BridgeTxDayFreq))
	}
	return n
}

func (m *MsgUpdateChainSyncConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainConfigIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEnableProofValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ValidatorId != 0 {
		n += 1 + sovTx(uint64(m.ValidatorId))
	}
	return n
}

func (m *MsgEnableProofValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ValidatorEnabled {
		n += 2
	}
	return n
}

func (m *MsgDisableProofValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ValidatorId != 0 {
		n += 1 + sovTx(uint64(m.ValidatorId))
	}
	return n
}

func (m *MsgDisableProofValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorIndex != 0 {
		n += 1 + sovTx(uint64(m.ValidatorIndex))
	}
	if m.ValidatorDisabled {
		n += 2
	}
	return n
}

func (m *MsgAssignOperatorValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAssignOperatorValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorIndex != 0 {
		n += 1 + sovTx(uint64(m.ValidatorIndex))
	}
	if m.OperatorIndex != 0 {
		n += 1 + sovTx(uint64(m.OperatorIndex))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignProofSequencer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignProofSequencer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignProofSequencer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignProofSequencerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignProofSequencerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignProofSequencerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequencerIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequencerIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignProofOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignProofOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignProofOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignProofOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignProofOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignProofOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignProofValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignProofValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignProofValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignProofValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignProofValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignProofValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitChainRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitChainRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitChainRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofSequencer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofSequencer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofOperator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitChainRoleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitChainRoleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitChainRoleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRoleIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainRoleIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcBlockTimeSec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcBlockTimeSec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnkBlockTimeSec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnkBlockTimeSec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumReq", wireType)
			}
			m.QuorumReq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuorumReq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAlloc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAlloc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeReq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinStakeReq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSubmissionsReq", wireType)
			}
			m.MinSubmissionsReq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSubmissionsReq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionTimeSec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionTimeSec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiveMode = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncBlockLimit", wireType)
			}
			m.SyncBlockLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncBlockLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitChainConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitChainConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitChainConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfigIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainConfigIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveProofOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveProofOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveProofOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveProofOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveProofOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveProofOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveProofSequencer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveProofSequencer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveProofSequencer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveProofSequencerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveProofSequencerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveProofSequencerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequencerIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequencerIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveProofValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveProofValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveProofValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveProofValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveProofValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveProofValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChainProofConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChainProofConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChainProofConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumReq", wireType)
			}
			m.QuorumReq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuorumReq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAlloc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAlloc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeReq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinStakeReq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSubmissionsReq", wireType)
			}
			m.MinSubmissionsReq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSubmissionsReq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionTimeSec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionTimeSec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiveMode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChainProofConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChainProofConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChainProofConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfigIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainConfigIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChainSyncConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChainSyncConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChainSyncConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcBlockTimeSec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcBlockTimeSec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnkBlockTimeSec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnkBlockTimeSec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncBlockLimit", wireType)
			}
			m.SyncBlockLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncBlockLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncLagLimit", wireType)
			}
			m.SyncLagLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SyncLagLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeTxDayFreq", wireType)
			}
			m.BridgeTxDayFreq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeTxDayFreq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChainSyncConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChainSyncConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChainSyncConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfigIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainConfigIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnableProofValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnableProofValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnableProofValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorId", wireType)
			}
			m.ValidatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnableProofValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnableProofValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnableProofValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidatorEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableProofValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableProofValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableProofValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorId", wireType)
			}
			m.ValidatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableProofValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableProofValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableProofValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidatorDisabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignOperatorValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignOperatorValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignOperatorValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAssignOperatorValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAssignOperatorValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAssignOperatorValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorIndex", wireType)
			}
			m.OperatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
